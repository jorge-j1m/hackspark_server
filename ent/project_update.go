// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/like"
	"github.com/jorge-j1m/hackspark_server/ent/predicate"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ProjectUpdate) SetUpdateTime(v time.Time) *ProjectUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetName sets the "name" field.
func (_u *ProjectUpdate) SetName(v string) *ProjectUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableName(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProjectUpdate) SetDescription(v string) *ProjectUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableDescription(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetLikeCount sets the "like_count" field.
func (_u *ProjectUpdate) SetLikeCount(v int) *ProjectUpdate {
	_u.mutation.ResetLikeCount()
	_u.mutation.SetLikeCount(v)
	return _u
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableLikeCount(v *int) *ProjectUpdate {
	if v != nil {
		_u.SetLikeCount(*v)
	}
	return _u
}

// AddLikeCount adds value to the "like_count" field.
func (_u *ProjectUpdate) AddLikeCount(v int) *ProjectUpdate {
	_u.mutation.AddLikeCount(v)
	return _u
}

// SetStarCount sets the "star_count" field.
func (_u *ProjectUpdate) SetStarCount(v int) *ProjectUpdate {
	_u.mutation.ResetStarCount()
	_u.mutation.SetStarCount(v)
	return _u
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableStarCount(v *int) *ProjectUpdate {
	if v != nil {
		_u.SetStarCount(*v)
	}
	return _u
}

// AddStarCount adds value to the "star_count" field.
func (_u *ProjectUpdate) AddStarCount(v int) *ProjectUpdate {
	_u.mutation.AddStarCount(v)
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *ProjectUpdate) SetOwnerID(id string) *ProjectUpdate {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *ProjectUpdate) SetOwner(v *User) *ProjectUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the User entity by IDs.
func (_u *ProjectUpdate) AddLikedByIDs(ids ...string) *ProjectUpdate {
	_u.mutation.AddLikedByIDs(ids...)
	return _u
}

// AddLikedBy adds the "liked_by" edges to the User entity.
func (_u *ProjectUpdate) AddLikedBy(v ...*User) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLikedByIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *ProjectUpdate) AddTagIDs(ids ...string) *ProjectUpdate {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *ProjectUpdate) AddTags(v ...*Tag) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (_u *ProjectUpdate) AddLikeIDs(ids ...string) *ProjectUpdate {
	_u.mutation.AddLikeIDs(ids...)
	return _u
}

// AddLikes adds the "likes" edges to the Like entity.
func (_u *ProjectUpdate) AddLikes(v ...*Like) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLikeIDs(ids...)
}

// AddProjectTagIDs adds the "project_tags" edge to the ProjectTag entity by IDs.
func (_u *ProjectUpdate) AddProjectTagIDs(ids ...string) *ProjectUpdate {
	_u.mutation.AddProjectTagIDs(ids...)
	return _u
}

// AddProjectTags adds the "project_tags" edges to the ProjectTag entity.
func (_u *ProjectUpdate) AddProjectTags(v ...*ProjectTag) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectTagIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdate) Mutation() *ProjectMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *ProjectUpdate) ClearOwner() *ProjectUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearLikedBy clears all "liked_by" edges to the User entity.
func (_u *ProjectUpdate) ClearLikedBy() *ProjectUpdate {
	_u.mutation.ClearLikedBy()
	return _u
}

// RemoveLikedByIDs removes the "liked_by" edge to User entities by IDs.
func (_u *ProjectUpdate) RemoveLikedByIDs(ids ...string) *ProjectUpdate {
	_u.mutation.RemoveLikedByIDs(ids...)
	return _u
}

// RemoveLikedBy removes "liked_by" edges to User entities.
func (_u *ProjectUpdate) RemoveLikedBy(v ...*User) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLikedByIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *ProjectUpdate) ClearTags() *ProjectUpdate {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *ProjectUpdate) RemoveTagIDs(ids ...string) *ProjectUpdate {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *ProjectUpdate) RemoveTags(v ...*Tag) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (_u *ProjectUpdate) ClearLikes() *ProjectUpdate {
	_u.mutation.ClearLikes()
	return _u
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (_u *ProjectUpdate) RemoveLikeIDs(ids ...string) *ProjectUpdate {
	_u.mutation.RemoveLikeIDs(ids...)
	return _u
}

// RemoveLikes removes "likes" edges to Like entities.
func (_u *ProjectUpdate) RemoveLikes(v ...*Like) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLikeIDs(ids...)
}

// ClearProjectTags clears all "project_tags" edges to the ProjectTag entity.
func (_u *ProjectUpdate) ClearProjectTags() *ProjectUpdate {
	_u.mutation.ClearProjectTags()
	return _u
}

// RemoveProjectTagIDs removes the "project_tags" edge to ProjectTag entities by IDs.
func (_u *ProjectUpdate) RemoveProjectTagIDs(ids ...string) *ProjectUpdate {
	_u.mutation.RemoveProjectTagIDs(ids...)
	return _u
}

// RemoveProjectTags removes "project_tags" edges to ProjectTag entities.
func (_u *ProjectUpdate) RemoveProjectTags(v ...*ProjectTag) *ProjectUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := project.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := project.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Project.description": %w`, err)}
		}
	}
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Project.owner"`)
	}
	return nil
}

func (_u *ProjectUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.LikeCount(); ok {
		_spec.SetField(project.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLikeCount(); ok {
		_spec.AddField(project.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StarCount(); ok {
		_spec.SetField(project.FieldStarCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStarCount(); ok {
		_spec.AddField(project.FieldStarCount, field.TypeInt, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &LikeCreate{config: _u.config, mutation: newLikeMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLikedByIDs(); len(nodes) > 0 && !_u.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LikeCreate{config: _u.config, mutation: newLikeMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LikeCreate{config: _u.config, mutation: newLikeMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLikesIDs(); len(nodes) > 0 && !_u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectTagsIDs(); len(nodes) > 0 && !_u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *ProjectUpdateOne) SetUpdateTime(v time.Time) *ProjectUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetName sets the "name" field.
func (_u *ProjectUpdateOne) SetName(v string) *ProjectUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableName(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProjectUpdateOne) SetDescription(v string) *ProjectUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableDescription(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetLikeCount sets the "like_count" field.
func (_u *ProjectUpdateOne) SetLikeCount(v int) *ProjectUpdateOne {
	_u.mutation.ResetLikeCount()
	_u.mutation.SetLikeCount(v)
	return _u
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableLikeCount(v *int) *ProjectUpdateOne {
	if v != nil {
		_u.SetLikeCount(*v)
	}
	return _u
}

// AddLikeCount adds value to the "like_count" field.
func (_u *ProjectUpdateOne) AddLikeCount(v int) *ProjectUpdateOne {
	_u.mutation.AddLikeCount(v)
	return _u
}

// SetStarCount sets the "star_count" field.
func (_u *ProjectUpdateOne) SetStarCount(v int) *ProjectUpdateOne {
	_u.mutation.ResetStarCount()
	_u.mutation.SetStarCount(v)
	return _u
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableStarCount(v *int) *ProjectUpdateOne {
	if v != nil {
		_u.SetStarCount(*v)
	}
	return _u
}

// AddStarCount adds value to the "star_count" field.
func (_u *ProjectUpdateOne) AddStarCount(v int) *ProjectUpdateOne {
	_u.mutation.AddStarCount(v)
	return _u
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_u *ProjectUpdateOne) SetOwnerID(id string) *ProjectUpdateOne {
	_u.mutation.SetOwnerID(id)
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *ProjectUpdateOne) SetOwner(v *User) *ProjectUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the User entity by IDs.
func (_u *ProjectUpdateOne) AddLikedByIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.AddLikedByIDs(ids...)
	return _u
}

// AddLikedBy adds the "liked_by" edges to the User entity.
func (_u *ProjectUpdateOne) AddLikedBy(v ...*User) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLikedByIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *ProjectUpdateOne) AddTagIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *ProjectUpdateOne) AddTags(v ...*Tag) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (_u *ProjectUpdateOne) AddLikeIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.AddLikeIDs(ids...)
	return _u
}

// AddLikes adds the "likes" edges to the Like entity.
func (_u *ProjectUpdateOne) AddLikes(v ...*Like) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddLikeIDs(ids...)
}

// AddProjectTagIDs adds the "project_tags" edge to the ProjectTag entity by IDs.
func (_u *ProjectUpdateOne) AddProjectTagIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.AddProjectTagIDs(ids...)
	return _u
}

// AddProjectTags adds the "project_tags" edges to the ProjectTag entity.
func (_u *ProjectUpdateOne) AddProjectTags(v ...*ProjectTag) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectTagIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdateOne) Mutation() *ProjectMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *ProjectUpdateOne) ClearOwner() *ProjectUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearLikedBy clears all "liked_by" edges to the User entity.
func (_u *ProjectUpdateOne) ClearLikedBy() *ProjectUpdateOne {
	_u.mutation.ClearLikedBy()
	return _u
}

// RemoveLikedByIDs removes the "liked_by" edge to User entities by IDs.
func (_u *ProjectUpdateOne) RemoveLikedByIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.RemoveLikedByIDs(ids...)
	return _u
}

// RemoveLikedBy removes "liked_by" edges to User entities.
func (_u *ProjectUpdateOne) RemoveLikedBy(v ...*User) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLikedByIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *ProjectUpdateOne) ClearTags() *ProjectUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *ProjectUpdateOne) RemoveTagIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *ProjectUpdateOne) RemoveTags(v ...*Tag) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (_u *ProjectUpdateOne) ClearLikes() *ProjectUpdateOne {
	_u.mutation.ClearLikes()
	return _u
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (_u *ProjectUpdateOne) RemoveLikeIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.RemoveLikeIDs(ids...)
	return _u
}

// RemoveLikes removes "likes" edges to Like entities.
func (_u *ProjectUpdateOne) RemoveLikes(v ...*Like) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveLikeIDs(ids...)
}

// ClearProjectTags clears all "project_tags" edges to the ProjectTag entity.
func (_u *ProjectUpdateOne) ClearProjectTags() *ProjectUpdateOne {
	_u.mutation.ClearProjectTags()
	return _u
}

// RemoveProjectTagIDs removes the "project_tags" edge to ProjectTag entities by IDs.
func (_u *ProjectUpdateOne) RemoveProjectTagIDs(ids ...string) *ProjectUpdateOne {
	_u.mutation.RemoveProjectTagIDs(ids...)
	return _u
}

// RemoveProjectTags removes "project_tags" edges to ProjectTag entities.
func (_u *ProjectUpdateOne) RemoveProjectTags(v ...*ProjectTag) *ProjectUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectTagIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Project entity.
func (_u *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := project.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := project.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Project.description": %w`, err)}
		}
	}
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Project.owner"`)
	}
	return nil
}

func (_u *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.LikeCount(); ok {
		_spec.SetField(project.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLikeCount(); ok {
		_spec.AddField(project.FieldLikeCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.StarCount(); ok {
		_spec.SetField(project.FieldStarCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStarCount(); ok {
		_spec.AddField(project.FieldStarCount, field.TypeInt, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &LikeCreate{config: _u.config, mutation: newLikeMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLikedByIDs(); len(nodes) > 0 && !_u.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LikeCreate{config: _u.config, mutation: newLikeMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LikeCreate{config: _u.config, mutation: newLikeMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedLikesIDs(); len(nodes) > 0 && !_u.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectTagsIDs(); len(nodes) > 0 && !_u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
