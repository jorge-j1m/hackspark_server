// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
	"github.com/jorge-j1m/hackspark_server/ent/usertechnology"
)

// UserTechnology is the model entity for the UserTechnology schema.
type UserTechnology struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// TechnologyID holds the value of the "technology_id" field.
	TechnologyID string `json:"technology_id,omitempty"`
	// SkillLevel holds the value of the "skill_level" field.
	SkillLevel usertechnology.SkillLevel `json:"skill_level,omitempty"`
	// YearsExperience holds the value of the "years_experience" field.
	YearsExperience *float64 `json:"years_experience,omitempty"`
	// IsPrimary holds the value of the "is_primary" field.
	IsPrimary bool `json:"is_primary,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTechnologyQuery when eager-loading is set.
	Edges        UserTechnologyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserTechnologyEdges holds the relations/edges for other nodes in the graph.
type UserTechnologyEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Technology holds the value of the technology edge.
	Technology *Tag `json:"technology,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTechnologyEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// TechnologyOrErr returns the Technology value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserTechnologyEdges) TechnologyOrErr() (*Tag, error) {
	if e.Technology != nil {
		return e.Technology, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tag.Label}
	}
	return nil, &NotLoadedError{edge: "technology"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserTechnology) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usertechnology.FieldIsPrimary:
			values[i] = new(sql.NullBool)
		case usertechnology.FieldYearsExperience:
			values[i] = new(sql.NullFloat64)
		case usertechnology.FieldID, usertechnology.FieldUserID, usertechnology.FieldTechnologyID, usertechnology.FieldSkillLevel:
			values[i] = new(sql.NullString)
		case usertechnology.FieldCreateTime, usertechnology.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserTechnology fields.
func (_m *UserTechnology) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usertechnology.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case usertechnology.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case usertechnology.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case usertechnology.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case usertechnology.FieldTechnologyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field technology_id", values[i])
			} else if value.Valid {
				_m.TechnologyID = value.String
			}
		case usertechnology.FieldSkillLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field skill_level", values[i])
			} else if value.Valid {
				_m.SkillLevel = usertechnology.SkillLevel(value.String)
			}
		case usertechnology.FieldYearsExperience:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field years_experience", values[i])
			} else if value.Valid {
				_m.YearsExperience = new(float64)
				*_m.YearsExperience = value.Float64
			}
		case usertechnology.FieldIsPrimary:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_primary", values[i])
			} else if value.Valid {
				_m.IsPrimary = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserTechnology.
// This includes values selected through modifiers, order, etc.
func (_m *UserTechnology) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserTechnology entity.
func (_m *UserTechnology) QueryUser() *UserQuery {
	return NewUserTechnologyClient(_m.config).QueryUser(_m)
}

// QueryTechnology queries the "technology" edge of the UserTechnology entity.
func (_m *UserTechnology) QueryTechnology() *TagQuery {
	return NewUserTechnologyClient(_m.config).QueryTechnology(_m)
}

// Update returns a builder for updating this UserTechnology.
// Note that you need to call UserTechnology.Unwrap() before calling this method if this UserTechnology
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *UserTechnology) Update() *UserTechnologyUpdateOne {
	return NewUserTechnologyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the UserTechnology entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *UserTechnology) Unwrap() *UserTechnology {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserTechnology is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *UserTechnology) String() string {
	var builder strings.Builder
	builder.WriteString("UserTechnology(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("technology_id=")
	builder.WriteString(_m.TechnologyID)
	builder.WriteString(", ")
	builder.WriteString("skill_level=")
	builder.WriteString(fmt.Sprintf("%v", _m.SkillLevel))
	builder.WriteString(", ")
	if v := _m.YearsExperience; v != nil {
		builder.WriteString("years_experience=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("is_primary=")
	builder.WriteString(fmt.Sprintf("%v", _m.IsPrimary))
	builder.WriteByte(')')
	return builder.String()
}

// UserTechnologies is a parsable slice of UserTechnology.
type UserTechnologies []*UserTechnology
