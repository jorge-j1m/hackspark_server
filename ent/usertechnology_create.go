// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
	"github.com/jorge-j1m/hackspark_server/ent/usertechnology"
)

// UserTechnologyCreate is the builder for creating a UserTechnology entity.
type UserTechnologyCreate struct {
	config
	mutation *UserTechnologyMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *UserTechnologyCreate) SetCreateTime(v time.Time) *UserTechnologyCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *UserTechnologyCreate) SetNillableCreateTime(v *time.Time) *UserTechnologyCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *UserTechnologyCreate) SetUpdateTime(v time.Time) *UserTechnologyCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *UserTechnologyCreate) SetNillableUpdateTime(v *time.Time) *UserTechnologyCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *UserTechnologyCreate) SetUserID(v string) *UserTechnologyCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetTechnologyID sets the "technology_id" field.
func (_c *UserTechnologyCreate) SetTechnologyID(v string) *UserTechnologyCreate {
	_c.mutation.SetTechnologyID(v)
	return _c
}

// SetSkillLevel sets the "skill_level" field.
func (_c *UserTechnologyCreate) SetSkillLevel(v usertechnology.SkillLevel) *UserTechnologyCreate {
	_c.mutation.SetSkillLevel(v)
	return _c
}

// SetNillableSkillLevel sets the "skill_level" field if the given value is not nil.
func (_c *UserTechnologyCreate) SetNillableSkillLevel(v *usertechnology.SkillLevel) *UserTechnologyCreate {
	if v != nil {
		_c.SetSkillLevel(*v)
	}
	return _c
}

// SetYearsExperience sets the "years_experience" field.
func (_c *UserTechnologyCreate) SetYearsExperience(v float64) *UserTechnologyCreate {
	_c.mutation.SetYearsExperience(v)
	return _c
}

// SetNillableYearsExperience sets the "years_experience" field if the given value is not nil.
func (_c *UserTechnologyCreate) SetNillableYearsExperience(v *float64) *UserTechnologyCreate {
	if v != nil {
		_c.SetYearsExperience(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserTechnologyCreate) SetID(v string) *UserTechnologyCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *UserTechnologyCreate) SetNillableID(v *string) *UserTechnologyCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetUser sets the "user" edge to the User entity.
func (_c *UserTechnologyCreate) SetUser(v *User) *UserTechnologyCreate {
	return _c.SetUserID(v.ID)
}

// SetTechnology sets the "technology" edge to the Tag entity.
func (_c *UserTechnologyCreate) SetTechnology(v *Tag) *UserTechnologyCreate {
	return _c.SetTechnologyID(v.ID)
}

// Mutation returns the UserTechnologyMutation object of the builder.
func (_c *UserTechnologyCreate) Mutation() *UserTechnologyMutation {
	return _c.mutation
}

// Save creates the UserTechnology in the database.
func (_c *UserTechnologyCreate) Save(ctx context.Context) (*UserTechnology, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserTechnologyCreate) SaveX(ctx context.Context) *UserTechnology {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserTechnologyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserTechnologyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *UserTechnologyCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := usertechnology.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := usertechnology.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.SkillLevel(); !ok {
		v := usertechnology.DefaultSkillLevel
		_c.mutation.SetSkillLevel(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := usertechnology.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserTechnologyCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "UserTechnology.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "UserTechnology.update_time"`)}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserTechnology.user_id"`)}
	}
	if v, ok := _c.mutation.UserID(); ok {
		if err := usertechnology.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.user_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TechnologyID(); !ok {
		return &ValidationError{Name: "technology_id", err: errors.New(`ent: missing required field "UserTechnology.technology_id"`)}
	}
	if v, ok := _c.mutation.TechnologyID(); ok {
		if err := usertechnology.TechnologyIDValidator(v); err != nil {
			return &ValidationError{Name: "technology_id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.technology_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.SkillLevel(); !ok {
		return &ValidationError{Name: "skill_level", err: errors.New(`ent: missing required field "UserTechnology.skill_level"`)}
	}
	if v, ok := _c.mutation.SkillLevel(); ok {
		if err := usertechnology.SkillLevelValidator(v); err != nil {
			return &ValidationError{Name: "skill_level", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.skill_level": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := usertechnology.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.id": %w`, err)}
		}
	}
	if len(_c.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserTechnology.user"`)}
	}
	if len(_c.mutation.TechnologyIDs()) == 0 {
		return &ValidationError{Name: "technology", err: errors.New(`ent: missing required edge "UserTechnology.technology"`)}
	}
	return nil
}

func (_c *UserTechnologyCreate) sqlSave(ctx context.Context) (*UserTechnology, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserTechnology.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserTechnologyCreate) createSpec() (*UserTechnology, *sqlgraph.CreateSpec) {
	var (
		_node = &UserTechnology{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(usertechnology.Table, sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(usertechnology.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(usertechnology.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.SkillLevel(); ok {
		_spec.SetField(usertechnology.FieldSkillLevel, field.TypeEnum, value)
		_node.SkillLevel = value
	}
	if value, ok := _c.mutation.YearsExperience(); ok {
		_spec.SetField(usertechnology.FieldYearsExperience, field.TypeFloat64, value)
		_node.YearsExperience = &value
	}
	if nodes := _c.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.UserTable,
			Columns: []string{usertechnology.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.TechnologyTable,
			Columns: []string{usertechnology.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TechnologyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserTechnologyCreateBulk is the builder for creating many UserTechnology entities in bulk.
type UserTechnologyCreateBulk struct {
	config
	err      error
	builders []*UserTechnologyCreate
}

// Save creates the UserTechnology entities in the database.
func (_c *UserTechnologyCreateBulk) Save(ctx context.Context) ([]*UserTechnology, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*UserTechnology, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserTechnologyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserTechnologyCreateBulk) SaveX(ctx context.Context) []*UserTechnology {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserTechnologyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserTechnologyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
