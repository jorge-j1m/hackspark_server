// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
	"github.com/jorge-j1m/hackspark_server/ent/usertechnology"
)

// TagCreate is the builder for creating a Tag entity.
type TagCreate struct {
	config
	mutation *TagMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *TagCreate) SetCreateTime(v time.Time) *TagCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *TagCreate) SetNillableCreateTime(v *time.Time) *TagCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *TagCreate) SetUpdateTime(v time.Time) *TagCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *TagCreate) SetNillableUpdateTime(v *time.Time) *TagCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *TagCreate) SetName(v string) *TagCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetSlug sets the "slug" field.
func (_c *TagCreate) SetSlug(v string) *TagCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetIcon sets the "icon" field.
func (_c *TagCreate) SetIcon(v string) *TagCreate {
	_c.mutation.SetIcon(v)
	return _c
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_c *TagCreate) SetNillableIcon(v *string) *TagCreate {
	if v != nil {
		_c.SetIcon(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *TagCreate) SetDescription(v string) *TagCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *TagCreate) SetNillableDescription(v *string) *TagCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *TagCreate) SetCategory(v tag.Category) *TagCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *TagCreate) SetNillableCategory(v *tag.Category) *TagCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetUsageCount sets the "usage_count" field.
func (_c *TagCreate) SetUsageCount(v int) *TagCreate {
	_c.mutation.SetUsageCount(v)
	return _c
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (_c *TagCreate) SetNillableUsageCount(v *int) *TagCreate {
	if v != nil {
		_c.SetUsageCount(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TagCreate) SetID(v string) *TagCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TagCreate) SetNillableID(v *string) *TagCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_c *TagCreate) SetCreatorID(id string) *TagCreate {
	_c.mutation.SetCreatorID(id)
	return _c
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (_c *TagCreate) SetNillableCreatorID(id *string) *TagCreate {
	if id != nil {
		_c = _c.SetCreatorID(*id)
	}
	return _c
}

// SetCreator sets the "creator" edge to the User entity.
func (_c *TagCreate) SetCreator(v *User) *TagCreate {
	return _c.SetCreatorID(v.ID)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (_c *TagCreate) AddProjectIDs(ids ...string) *TagCreate {
	_c.mutation.AddProjectIDs(ids...)
	return _c
}

// AddProjects adds the "projects" edges to the Project entity.
func (_c *TagCreate) AddProjects(v ...*Project) *TagCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProjectIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_c *TagCreate) AddUserIDs(ids ...string) *TagCreate {
	_c.mutation.AddUserIDs(ids...)
	return _c
}

// AddUsers adds the "users" edges to the User entity.
func (_c *TagCreate) AddUsers(v ...*User) *TagCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserIDs(ids...)
}

// AddProjectTagIDs adds the "project_tags" edge to the ProjectTag entity by IDs.
func (_c *TagCreate) AddProjectTagIDs(ids ...string) *TagCreate {
	_c.mutation.AddProjectTagIDs(ids...)
	return _c
}

// AddProjectTags adds the "project_tags" edges to the ProjectTag entity.
func (_c *TagCreate) AddProjectTags(v ...*ProjectTag) *TagCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProjectTagIDs(ids...)
}

// AddUserTechnologyIDs adds the "user_technologies" edge to the UserTechnology entity by IDs.
func (_c *TagCreate) AddUserTechnologyIDs(ids ...string) *TagCreate {
	_c.mutation.AddUserTechnologyIDs(ids...)
	return _c
}

// AddUserTechnologies adds the "user_technologies" edges to the UserTechnology entity.
func (_c *TagCreate) AddUserTechnologies(v ...*UserTechnology) *TagCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserTechnologyIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (_c *TagCreate) Mutation() *TagMutation {
	return _c.mutation
}

// Save creates the Tag in the database.
func (_c *TagCreate) Save(ctx context.Context) (*Tag, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TagCreate) SaveX(ctx context.Context) *Tag {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TagCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TagCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TagCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := tag.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := tag.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.Category(); !ok {
		v := tag.DefaultCategory
		_c.mutation.SetCategory(v)
	}
	if _, ok := _c.mutation.UsageCount(); !ok {
		v := tag.DefaultUsageCount
		_c.mutation.SetUsageCount(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := tag.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TagCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Tag.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Tag.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Tag.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := tag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tag.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Tag.slug"`)}
	}
	if v, ok := _c.mutation.Slug(); ok {
		if err := tag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Tag.slug": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Tag.category"`)}
	}
	if v, ok := _c.mutation.Category(); ok {
		if err := tag.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Tag.category": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UsageCount(); !ok {
		return &ValidationError{Name: "usage_count", err: errors.New(`ent: missing required field "Tag.usage_count"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := tag.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Tag.id": %w`, err)}
		}
	}
	return nil
}

func (_c *TagCreate) sqlSave(ctx context.Context) (*Tag, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Tag.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TagCreate) createSpec() (*Tag, *sqlgraph.CreateSpec) {
	var (
		_node = &Tag{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(tag.Table, sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(tag.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(tag.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(tag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(tag.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Icon(); ok {
		_spec.SetField(tag.FieldIcon, field.TypeString, value)
		_node.Icon = &value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(tag.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(tag.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.UsageCount(); ok {
		_spec.SetField(tag.FieldUsageCount, field.TypeInt, value)
		_node.UsageCount = value
	}
	if nodes := _c.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tag.CreatorTable,
			Columns: []string{tag.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_tags = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _c.config, mutation: newProjectTagMutation(_c.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTechnologyCreate{config: _c.config, mutation: newUserTechnologyMutation(_c.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProjectTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UserTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TagCreateBulk is the builder for creating many Tag entities in bulk.
type TagCreateBulk struct {
	config
	err      error
	builders []*TagCreate
}

// Save creates the Tag entities in the database.
func (_c *TagCreateBulk) Save(ctx context.Context) ([]*Tag, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Tag, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TagCreateBulk) SaveX(ctx context.Context) []*Tag {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TagCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TagCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
