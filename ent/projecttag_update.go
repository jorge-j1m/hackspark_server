// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/predicate"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
)

// ProjectTagUpdate is the builder for updating ProjectTag entities.
type ProjectTagUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectTagMutation
}

// Where appends a list predicates to the ProjectTagUpdate builder.
func (_u *ProjectTagUpdate) Where(ps ...predicate.ProjectTag) *ProjectTagUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *ProjectTagUpdate) SetUpdateTime(v time.Time) *ProjectTagUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *ProjectTagUpdate) SetProjectID(v string) *ProjectTagUpdate {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *ProjectTagUpdate) SetNillableProjectID(v *string) *ProjectTagUpdate {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// SetTagID sets the "tag_id" field.
func (_u *ProjectTagUpdate) SetTagID(v string) *ProjectTagUpdate {
	_u.mutation.SetTagID(v)
	return _u
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (_u *ProjectTagUpdate) SetNillableTagID(v *string) *ProjectTagUpdate {
	if v != nil {
		_u.SetTagID(*v)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *ProjectTagUpdate) SetProject(v *Project) *ProjectTagUpdate {
	return _u.SetProjectID(v.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (_u *ProjectTagUpdate) SetTag(v *Tag) *ProjectTagUpdate {
	return _u.SetTagID(v.ID)
}

// Mutation returns the ProjectTagMutation object of the builder.
func (_u *ProjectTagUpdate) Mutation() *ProjectTagMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *ProjectTagUpdate) ClearProject() *ProjectTagUpdate {
	_u.mutation.ClearProject()
	return _u
}

// ClearTag clears the "tag" edge to the Tag entity.
func (_u *ProjectTagUpdate) ClearTag() *ProjectTagUpdate {
	_u.mutation.ClearTag()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectTagUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectTagUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectTagUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectTagUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectTagUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := projecttag.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectTagUpdate) check() error {
	if v, ok := _u.mutation.ProjectID(); ok {
		if err := projecttag.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.project_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TagID(); ok {
		if err := projecttag.TagIDValidator(v); err != nil {
			return &ValidationError{Name: "tag_id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.tag_id": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTag.project"`)
	}
	if _u.mutation.TagCleared() && len(_u.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTag.tag"`)
	}
	return nil
}

func (_u *ProjectTagUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttag.Table, projecttag.Columns, sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(projecttag.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.ProjectTable,
			Columns: []string{projecttag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.ProjectTable,
			Columns: []string{projecttag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.TagTable,
			Columns: []string{projecttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.TagTable,
			Columns: []string{projecttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectTagUpdateOne is the builder for updating a single ProjectTag entity.
type ProjectTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectTagMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *ProjectTagUpdateOne) SetUpdateTime(v time.Time) *ProjectTagUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *ProjectTagUpdateOne) SetProjectID(v string) *ProjectTagUpdateOne {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *ProjectTagUpdateOne) SetNillableProjectID(v *string) *ProjectTagUpdateOne {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// SetTagID sets the "tag_id" field.
func (_u *ProjectTagUpdateOne) SetTagID(v string) *ProjectTagUpdateOne {
	_u.mutation.SetTagID(v)
	return _u
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (_u *ProjectTagUpdateOne) SetNillableTagID(v *string) *ProjectTagUpdateOne {
	if v != nil {
		_u.SetTagID(*v)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *ProjectTagUpdateOne) SetProject(v *Project) *ProjectTagUpdateOne {
	return _u.SetProjectID(v.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (_u *ProjectTagUpdateOne) SetTag(v *Tag) *ProjectTagUpdateOne {
	return _u.SetTagID(v.ID)
}

// Mutation returns the ProjectTagMutation object of the builder.
func (_u *ProjectTagUpdateOne) Mutation() *ProjectTagMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *ProjectTagUpdateOne) ClearProject() *ProjectTagUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// ClearTag clears the "tag" edge to the Tag entity.
func (_u *ProjectTagUpdateOne) ClearTag() *ProjectTagUpdateOne {
	_u.mutation.ClearTag()
	return _u
}

// Where appends a list predicates to the ProjectTagUpdate builder.
func (_u *ProjectTagUpdateOne) Where(ps ...predicate.ProjectTag) *ProjectTagUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectTagUpdateOne) Select(field string, fields ...string) *ProjectTagUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProjectTag entity.
func (_u *ProjectTagUpdateOne) Save(ctx context.Context) (*ProjectTag, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectTagUpdateOne) SaveX(ctx context.Context) *ProjectTag {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectTagUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectTagUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectTagUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := projecttag.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectTagUpdateOne) check() error {
	if v, ok := _u.mutation.ProjectID(); ok {
		if err := projecttag.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.project_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TagID(); ok {
		if err := projecttag.TagIDValidator(v); err != nil {
			return &ValidationError{Name: "tag_id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.tag_id": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTag.project"`)
	}
	if _u.mutation.TagCleared() && len(_u.mutation.TagIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectTag.tag"`)
	}
	return nil
}

func (_u *ProjectTagUpdateOne) sqlSave(ctx context.Context) (_node *ProjectTag, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projecttag.Table, projecttag.Columns, sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projecttag.FieldID)
		for _, f := range fields {
			if !projecttag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projecttag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(projecttag.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.ProjectTable,
			Columns: []string{projecttag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.ProjectTable,
			Columns: []string{projecttag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.TagTable,
			Columns: []string{projecttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.TagTable,
			Columns: []string{projecttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectTag{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projecttag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
