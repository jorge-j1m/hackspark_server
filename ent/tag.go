// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
)

// Tag is the model entity for the Tag schema.
type Tag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Icon holds the value of the "icon" field.
	Icon *string `json:"icon,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Category holds the value of the "category" field.
	Category tag.Category `json:"category,omitempty"`
	// UsageCount holds the value of the "usage_count" field.
	UsageCount int `json:"usage_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagQuery when eager-loading is set.
	Edges             TagEdges `json:"edges"`
	user_created_tags *string
	selectValues      sql.SelectValues
}

// TagEdges holds the relations/edges for other nodes in the graph.
type TagEdges struct {
	// Creator holds the value of the creator edge.
	Creator *User `json:"creator,omitempty"`
	// Projects holds the value of the projects edge.
	Projects []*Project `json:"projects,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// ProjectTags holds the value of the project_tags edge.
	ProjectTags []*ProjectTag `json:"project_tags,omitempty"`
	// UserTechnologies holds the value of the user_technologies edge.
	UserTechnologies []*UserTechnology `json:"user_technologies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TagEdges) CreatorOrErr() (*User, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// ProjectsOrErr returns the Projects value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) ProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[1] {
		return e.Projects, nil
	}
	return nil, &NotLoadedError{edge: "projects"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// ProjectTagsOrErr returns the ProjectTags value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) ProjectTagsOrErr() ([]*ProjectTag, error) {
	if e.loadedTypes[3] {
		return e.ProjectTags, nil
	}
	return nil, &NotLoadedError{edge: "project_tags"}
}

// UserTechnologiesOrErr returns the UserTechnologies value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) UserTechnologiesOrErr() ([]*UserTechnology, error) {
	if e.loadedTypes[4] {
		return e.UserTechnologies, nil
	}
	return nil, &NotLoadedError{edge: "user_technologies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tag.FieldUsageCount:
			values[i] = new(sql.NullInt64)
		case tag.FieldID, tag.FieldName, tag.FieldSlug, tag.FieldIcon, tag.FieldDescription, tag.FieldCategory:
			values[i] = new(sql.NullString)
		case tag.FieldCreateTime, tag.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case tag.ForeignKeys[0]: // user_created_tags
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tag fields.
func (_m *Tag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case tag.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case tag.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case tag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case tag.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case tag.FieldIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon", values[i])
			} else if value.Valid {
				_m.Icon = new(string)
				*_m.Icon = value.String
			}
		case tag.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case tag.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				_m.Category = tag.Category(value.String)
			}
		case tag.FieldUsageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field usage_count", values[i])
			} else if value.Valid {
				_m.UsageCount = int(value.Int64)
			}
		case tag.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_created_tags", values[i])
			} else if value.Valid {
				_m.user_created_tags = new(string)
				*_m.user_created_tags = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tag.
// This includes values selected through modifiers, order, etc.
func (_m *Tag) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCreator queries the "creator" edge of the Tag entity.
func (_m *Tag) QueryCreator() *UserQuery {
	return NewTagClient(_m.config).QueryCreator(_m)
}

// QueryProjects queries the "projects" edge of the Tag entity.
func (_m *Tag) QueryProjects() *ProjectQuery {
	return NewTagClient(_m.config).QueryProjects(_m)
}

// QueryUsers queries the "users" edge of the Tag entity.
func (_m *Tag) QueryUsers() *UserQuery {
	return NewTagClient(_m.config).QueryUsers(_m)
}

// QueryProjectTags queries the "project_tags" edge of the Tag entity.
func (_m *Tag) QueryProjectTags() *ProjectTagQuery {
	return NewTagClient(_m.config).QueryProjectTags(_m)
}

// QueryUserTechnologies queries the "user_technologies" edge of the Tag entity.
func (_m *Tag) QueryUserTechnologies() *UserTechnologyQuery {
	return NewTagClient(_m.config).QueryUserTechnologies(_m)
}

// Update returns a builder for updating this Tag.
// Note that you need to call Tag.Unwrap() before calling this method if this Tag
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Tag) Update() *TagUpdateOne {
	return NewTagClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Tag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Tag) Unwrap() *Tag {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tag is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Tag) String() string {
	var builder strings.Builder
	builder.WriteString("Tag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	if v := _m.Icon; v != nil {
		builder.WriteString("icon=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", _m.Category))
	builder.WriteString(", ")
	builder.WriteString("usage_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.UsageCount))
	builder.WriteByte(')')
	return builder.String()
}

// Tags is a parsable slice of Tag.
type Tags []*Tag
