// ent/schema/user.go
package schema

import (
	"context"
	"fmt"

	"entgo.io/ent"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
	"entgo.io/ent/schema/mixin"
	"go.jetify.com/typeid/v2"
	"golang.org/x/crypto/bcrypt"
)

// User holds the schema definition for the User entity.
type User struct {
	ent.Schema
}

// Mixin of the User.
func (User) Mixin() []ent.Mixin {
	return []ent.Mixin{
		mixin.Time{}, // Provides created_at and updated_at fields
	}
}

// Fields of the User.
func (User) Fields() []ent.Field {
	return []ent.Field{
		field.String("id").
			DefaultFunc(func() string {
				return typeid.MustGenerate("usr").String()
			}).
			NotEmpty().
			Unique().
			Immutable(),
		field.String("username").
			NotEmpty().
			Unique(),
		field.String("email").
			NotEmpty().
			Unique(),
		field.Bool("email_verified").
			Default(false),
		field.String("password").
			NotEmpty().
			Sensitive().
			Comment("Password is automatically hashed before setting, so just set the plaintext password."),
		field.String("first_name").
			NotEmpty(),
		field.String("last_name").
			NotEmpty(),
		field.String("bio").
			Optional().
			Nillable(),
		field.String("avatar_url").
			Optional().
			Nillable(),

		// Account management fields
		field.Time("last_login_at").
			Optional().
			Nillable(),
		field.Enum("account_status").
			Values("pending", "active", "suspended").
			Default("pending"),
		field.String("verification_token").
			Optional().
			Nillable().
			Sensitive(),
		field.Time("verification_token_expiry_at").
			Optional().
			Nillable(),
		field.Int("failed_login_attempts").
			Default(0),
		field.String("reset_password_token").
			Optional().
			Nillable().
			Sensitive(),
		field.Time("reset_password_token_expiry_at").
			Optional().
			Nillable(),
	}
}

// Hooks of the User.
func (User) Hooks() []ent.Hook {
	return []ent.Hook{
		HashPasswordHook,
	}
}

// Edges of the User.
func (User) Edges() []ent.Edge {
	return []ent.Edge{
		edge.To("sessions", Session.Type),                                                   // A user can have many sessions.
		edge.To("owned_projects", Project.Type),                                             // A user can own many projects.
		edge.To("liked_projects", Project.Type).Through("likes", Like.Type),                 // A user can like many projects.
		edge.To("technologies", Tag.Type).Through("user_technologies", UserTechnology.Type), // A user can know many technologies.
		edge.To("created_tags", Tag.Type),                                                   // A user can create many tags.
	}
}

// HashPasswordHook hashes the password before it is stored.
func HashPasswordHook(next ent.Mutator) ent.Mutator {
	// The interface name is generated by ent based on the field name.
	type PasswordSetter interface {
		SetPassword(string)
		Password() (string, bool)
	}
	return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
		ps, ok := m.(PasswordSetter)
		if !ok {
			return next.Mutate(ctx, m)
		}
		password, exists := ps.Password()
		// If the password field is not set, or the operation is not Create/Update, skip.
		if !exists || !(m.Op().Is(ent.OpCreate) || m.Op().Is(ent.OpUpdateOne)) {
			return next.Mutate(ctx, m)
		}
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
		if err != nil {
			return nil, fmt.Errorf("failed to hash password: %w", err)
		}
		ps.SetPassword(string(hashedPassword))
		return next.Mutate(ctx, m)
	})
}
