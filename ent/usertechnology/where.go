// Code generated by ent, DO NOT EDIT.

package usertechnology

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jorge-j1m/hackspark_server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldUpdateTime, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldUserID, v))
}

// TechnologyID applies equality check predicate on the "technology_id" field. It's identical to TechnologyIDEQ.
func TechnologyID(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldTechnologyID, v))
}

// YearsExperience applies equality check predicate on the "years_experience" field. It's identical to YearsExperienceEQ.
func YearsExperience(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldYearsExperience, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLTE(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldContainsFold(FieldUserID, v))
}

// TechnologyIDEQ applies the EQ predicate on the "technology_id" field.
func TechnologyIDEQ(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldTechnologyID, v))
}

// TechnologyIDNEQ applies the NEQ predicate on the "technology_id" field.
func TechnologyIDNEQ(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldTechnologyID, v))
}

// TechnologyIDIn applies the In predicate on the "technology_id" field.
func TechnologyIDIn(vs ...string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldTechnologyID, vs...))
}

// TechnologyIDNotIn applies the NotIn predicate on the "technology_id" field.
func TechnologyIDNotIn(vs ...string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldTechnologyID, vs...))
}

// TechnologyIDGT applies the GT predicate on the "technology_id" field.
func TechnologyIDGT(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGT(FieldTechnologyID, v))
}

// TechnologyIDGTE applies the GTE predicate on the "technology_id" field.
func TechnologyIDGTE(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGTE(FieldTechnologyID, v))
}

// TechnologyIDLT applies the LT predicate on the "technology_id" field.
func TechnologyIDLT(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLT(FieldTechnologyID, v))
}

// TechnologyIDLTE applies the LTE predicate on the "technology_id" field.
func TechnologyIDLTE(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLTE(FieldTechnologyID, v))
}

// TechnologyIDContains applies the Contains predicate on the "technology_id" field.
func TechnologyIDContains(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldContains(FieldTechnologyID, v))
}

// TechnologyIDHasPrefix applies the HasPrefix predicate on the "technology_id" field.
func TechnologyIDHasPrefix(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldHasPrefix(FieldTechnologyID, v))
}

// TechnologyIDHasSuffix applies the HasSuffix predicate on the "technology_id" field.
func TechnologyIDHasSuffix(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldHasSuffix(FieldTechnologyID, v))
}

// TechnologyIDEqualFold applies the EqualFold predicate on the "technology_id" field.
func TechnologyIDEqualFold(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEqualFold(FieldTechnologyID, v))
}

// TechnologyIDContainsFold applies the ContainsFold predicate on the "technology_id" field.
func TechnologyIDContainsFold(v string) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldContainsFold(FieldTechnologyID, v))
}

// SkillLevelEQ applies the EQ predicate on the "skill_level" field.
func SkillLevelEQ(v SkillLevel) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldSkillLevel, v))
}

// SkillLevelNEQ applies the NEQ predicate on the "skill_level" field.
func SkillLevelNEQ(v SkillLevel) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldSkillLevel, v))
}

// SkillLevelIn applies the In predicate on the "skill_level" field.
func SkillLevelIn(vs ...SkillLevel) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldSkillLevel, vs...))
}

// SkillLevelNotIn applies the NotIn predicate on the "skill_level" field.
func SkillLevelNotIn(vs ...SkillLevel) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldSkillLevel, vs...))
}

// YearsExperienceEQ applies the EQ predicate on the "years_experience" field.
func YearsExperienceEQ(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldEQ(FieldYearsExperience, v))
}

// YearsExperienceNEQ applies the NEQ predicate on the "years_experience" field.
func YearsExperienceNEQ(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNEQ(FieldYearsExperience, v))
}

// YearsExperienceIn applies the In predicate on the "years_experience" field.
func YearsExperienceIn(vs ...float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIn(FieldYearsExperience, vs...))
}

// YearsExperienceNotIn applies the NotIn predicate on the "years_experience" field.
func YearsExperienceNotIn(vs ...float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotIn(FieldYearsExperience, vs...))
}

// YearsExperienceGT applies the GT predicate on the "years_experience" field.
func YearsExperienceGT(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGT(FieldYearsExperience, v))
}

// YearsExperienceGTE applies the GTE predicate on the "years_experience" field.
func YearsExperienceGTE(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldGTE(FieldYearsExperience, v))
}

// YearsExperienceLT applies the LT predicate on the "years_experience" field.
func YearsExperienceLT(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLT(FieldYearsExperience, v))
}

// YearsExperienceLTE applies the LTE predicate on the "years_experience" field.
func YearsExperienceLTE(v float64) predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldLTE(FieldYearsExperience, v))
}

// YearsExperienceIsNil applies the IsNil predicate on the "years_experience" field.
func YearsExperienceIsNil() predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldIsNull(FieldYearsExperience))
}

// YearsExperienceNotNil applies the NotNil predicate on the "years_experience" field.
func YearsExperienceNotNil() predicate.UserTechnology {
	return predicate.UserTechnology(sql.FieldNotNull(FieldYearsExperience))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserTechnology {
	return predicate.UserTechnology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserTechnology {
	return predicate.UserTechnology(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTechnology applies the HasEdge predicate on the "technology" edge.
func HasTechnology() predicate.UserTechnology {
	return predicate.UserTechnology(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TechnologyTable, TechnologyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTechnologyWith applies the HasEdge predicate on the "technology" edge with a given conditions (other predicates).
func HasTechnologyWith(preds ...predicate.Tag) predicate.UserTechnology {
	return predicate.UserTechnology(func(s *sql.Selector) {
		step := newTechnologyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserTechnology) predicate.UserTechnology {
	return predicate.UserTechnology(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserTechnology) predicate.UserTechnology {
	return predicate.UserTechnology(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserTechnology) predicate.UserTechnology {
	return predicate.UserTechnology(sql.NotPredicates(p))
}
