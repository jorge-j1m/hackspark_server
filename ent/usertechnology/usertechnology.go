// Code generated by ent, DO NOT EDIT.

package usertechnology

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usertechnology type in the database.
	Label = "user_technology"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldTechnologyID holds the string denoting the technology_id field in the database.
	FieldTechnologyID = "technology_id"
	// FieldSkillLevel holds the string denoting the skill_level field in the database.
	FieldSkillLevel = "skill_level"
	// FieldYearsExperience holds the string denoting the years_experience field in the database.
	FieldYearsExperience = "years_experience"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTechnology holds the string denoting the technology edge name in mutations.
	EdgeTechnology = "technology"
	// Table holds the table name of the usertechnology in the database.
	Table = "user_technologies"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_technologies"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// TechnologyTable is the table that holds the technology relation/edge.
	TechnologyTable = "user_technologies"
	// TechnologyInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TechnologyInverseTable = "tags"
	// TechnologyColumn is the table column denoting the technology relation/edge.
	TechnologyColumn = "technology_id"
)

// Columns holds all SQL columns for usertechnology fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUserID,
	FieldTechnologyID,
	FieldSkillLevel,
	FieldYearsExperience,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// TechnologyIDValidator is a validator for the "technology_id" field. It is called by the builders before save.
	TechnologyIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// SkillLevel defines the type for the "skill_level" enum field.
type SkillLevel string

// SkillLevelBeginner is the default value of the SkillLevel enum.
const DefaultSkillLevel = SkillLevelBeginner

// SkillLevel values.
const (
	SkillLevelBeginner     SkillLevel = "beginner"
	SkillLevelIntermediate SkillLevel = "intermediate"
	SkillLevelExpert       SkillLevel = "expert"
)

func (sl SkillLevel) String() string {
	return string(sl)
}

// SkillLevelValidator is a validator for the "skill_level" field enum values. It is called by the builders before save.
func SkillLevelValidator(sl SkillLevel) error {
	switch sl {
	case SkillLevelBeginner, SkillLevelIntermediate, SkillLevelExpert:
		return nil
	default:
		return fmt.Errorf("usertechnology: invalid enum value for skill_level field: %q", sl)
	}
}

// OrderOption defines the ordering options for the UserTechnology queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByTechnologyID orders the results by the technology_id field.
func ByTechnologyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTechnologyID, opts...).ToFunc()
}

// BySkillLevel orders the results by the skill_level field.
func BySkillLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSkillLevel, opts...).ToFunc()
}

// ByYearsExperience orders the results by the years_experience field.
func ByYearsExperience(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldYearsExperience, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByTechnologyField orders the results by technology field.
func ByTechnologyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechnologyStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newTechnologyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TechnologyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TechnologyTable, TechnologyColumn),
	)
}
