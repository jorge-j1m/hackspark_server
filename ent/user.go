// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jorge-j1m/hackspark_server/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// EmailVerified holds the value of the "email_verified" field.
	EmailVerified bool `json:"email_verified,omitempty"`
	// Password is automatically hashed before setting, so just set the plaintext password.
	Password string `json:"-"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio *string `json:"bio,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL *string `json:"avatar_url,omitempty"`
	// LastLoginAt holds the value of the "last_login_at" field.
	LastLoginAt *time.Time `json:"last_login_at,omitempty"`
	// AccountStatus holds the value of the "account_status" field.
	AccountStatus user.AccountStatus `json:"account_status,omitempty"`
	// VerificationToken holds the value of the "verification_token" field.
	VerificationToken *string `json:"-"`
	// VerificationTokenExpiryAt holds the value of the "verification_token_expiry_at" field.
	VerificationTokenExpiryAt *time.Time `json:"verification_token_expiry_at,omitempty"`
	// FailedLoginAttempts holds the value of the "failed_login_attempts" field.
	FailedLoginAttempts int `json:"failed_login_attempts,omitempty"`
	// ResetPasswordToken holds the value of the "reset_password_token" field.
	ResetPasswordToken *string `json:"-"`
	// ResetPasswordTokenExpiryAt holds the value of the "reset_password_token_expiry_at" field.
	ResetPasswordTokenExpiryAt *time.Time `json:"reset_password_token_expiry_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// OwnedProjects holds the value of the owned_projects edge.
	OwnedProjects []*Project `json:"owned_projects,omitempty"`
	// LikedProjects holds the value of the liked_projects edge.
	LikedProjects []*Project `json:"liked_projects,omitempty"`
	// Technologies holds the value of the technologies edge.
	Technologies []*Tag `json:"technologies,omitempty"`
	// CreatedTags holds the value of the created_tags edge.
	CreatedTags []*Tag `json:"created_tags,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*Like `json:"likes,omitempty"`
	// UserTechnologies holds the value of the user_technologies edge.
	UserTechnologies []*UserTechnology `json:"user_technologies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[0] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// OwnedProjectsOrErr returns the OwnedProjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[1] {
		return e.OwnedProjects, nil
	}
	return nil, &NotLoadedError{edge: "owned_projects"}
}

// LikedProjectsOrErr returns the LikedProjects value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedProjectsOrErr() ([]*Project, error) {
	if e.loadedTypes[2] {
		return e.LikedProjects, nil
	}
	return nil, &NotLoadedError{edge: "liked_projects"}
}

// TechnologiesOrErr returns the Technologies value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TechnologiesOrErr() ([]*Tag, error) {
	if e.loadedTypes[3] {
		return e.Technologies, nil
	}
	return nil, &NotLoadedError{edge: "technologies"}
}

// CreatedTagsOrErr returns the CreatedTags value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CreatedTagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[4] {
		return e.CreatedTags, nil
	}
	return nil, &NotLoadedError{edge: "created_tags"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[5] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// UserTechnologiesOrErr returns the UserTechnologies value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserTechnologiesOrErr() ([]*UserTechnology, error) {
	if e.loadedTypes[6] {
		return e.UserTechnologies, nil
	}
	return nil, &NotLoadedError{edge: "user_technologies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldEmailVerified:
			values[i] = new(sql.NullBool)
		case user.FieldFailedLoginAttempts:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldUsername, user.FieldEmail, user.FieldPassword, user.FieldFirstName, user.FieldLastName, user.FieldBio, user.FieldAvatarURL, user.FieldAccountStatus, user.FieldVerificationToken, user.FieldResetPasswordToken:
			values[i] = new(sql.NullString)
		case user.FieldCreateTime, user.FieldUpdateTime, user.FieldLastLoginAt, user.FieldVerificationTokenExpiryAt, user.FieldResetPasswordTokenExpiryAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (_m *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case user.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				_m.Username = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case user.FieldEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_verified", values[i])
			} else if value.Valid {
				_m.EmailVerified = value.Bool
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				_m.Password = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				_m.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				_m.LastName = value.String
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				_m.Bio = new(string)
				*_m.Bio = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				_m.AvatarURL = new(string)
				*_m.AvatarURL = value.String
			}
		case user.FieldLastLoginAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_at", values[i])
			} else if value.Valid {
				_m.LastLoginAt = new(time.Time)
				*_m.LastLoginAt = value.Time
			}
		case user.FieldAccountStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_status", values[i])
			} else if value.Valid {
				_m.AccountStatus = user.AccountStatus(value.String)
			}
		case user.FieldVerificationToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verification_token", values[i])
			} else if value.Valid {
				_m.VerificationToken = new(string)
				*_m.VerificationToken = value.String
			}
		case user.FieldVerificationTokenExpiryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verification_token_expiry_at", values[i])
			} else if value.Valid {
				_m.VerificationTokenExpiryAt = new(time.Time)
				*_m.VerificationTokenExpiryAt = value.Time
			}
		case user.FieldFailedLoginAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failed_login_attempts", values[i])
			} else if value.Valid {
				_m.FailedLoginAttempts = int(value.Int64)
			}
		case user.FieldResetPasswordToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reset_password_token", values[i])
			} else if value.Valid {
				_m.ResetPasswordToken = new(string)
				*_m.ResetPasswordToken = value.String
			}
		case user.FieldResetPasswordTokenExpiryAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reset_password_token_expiry_at", values[i])
			} else if value.Valid {
				_m.ResetPasswordTokenExpiryAt = new(time.Time)
				*_m.ResetPasswordTokenExpiryAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (_m *User) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (_m *User) QuerySessions() *SessionQuery {
	return NewUserClient(_m.config).QuerySessions(_m)
}

// QueryOwnedProjects queries the "owned_projects" edge of the User entity.
func (_m *User) QueryOwnedProjects() *ProjectQuery {
	return NewUserClient(_m.config).QueryOwnedProjects(_m)
}

// QueryLikedProjects queries the "liked_projects" edge of the User entity.
func (_m *User) QueryLikedProjects() *ProjectQuery {
	return NewUserClient(_m.config).QueryLikedProjects(_m)
}

// QueryTechnologies queries the "technologies" edge of the User entity.
func (_m *User) QueryTechnologies() *TagQuery {
	return NewUserClient(_m.config).QueryTechnologies(_m)
}

// QueryCreatedTags queries the "created_tags" edge of the User entity.
func (_m *User) QueryCreatedTags() *TagQuery {
	return NewUserClient(_m.config).QueryCreatedTags(_m)
}

// QueryLikes queries the "likes" edge of the User entity.
func (_m *User) QueryLikes() *LikeQuery {
	return NewUserClient(_m.config).QueryLikes(_m)
}

// QueryUserTechnologies queries the "user_technologies" edge of the User entity.
func (_m *User) QueryUserTechnologies() *UserTechnologyQuery {
	return NewUserClient(_m.config).QueryUserTechnologies(_m)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *User) Update() *UserUpdateOne {
	return NewUserClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *User) Unwrap() *User {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(_m.Username)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("email_verified=")
	builder.WriteString(fmt.Sprintf("%v", _m.EmailVerified))
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(_m.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(_m.LastName)
	builder.WriteString(", ")
	if v := _m.Bio; v != nil {
		builder.WriteString("bio=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LastLoginAt; v != nil {
		builder.WriteString("last_login_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("account_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.AccountStatus))
	builder.WriteString(", ")
	builder.WriteString("verification_token=<sensitive>")
	builder.WriteString(", ")
	if v := _m.VerificationTokenExpiryAt; v != nil {
		builder.WriteString("verification_token_expiry_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("failed_login_attempts=")
	builder.WriteString(fmt.Sprintf("%v", _m.FailedLoginAttempts))
	builder.WriteString(", ")
	builder.WriteString("reset_password_token=<sensitive>")
	builder.WriteString(", ")
	if v := _m.ResetPasswordTokenExpiryAt; v != nil {
		builder.WriteString("reset_password_token_expiry_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
