// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/user"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// LikeCount holds the value of the "like_count" field.
	LikeCount int `json:"like_count,omitempty"`
	// StarCount holds the value of the "star_count" field.
	StarCount int `json:"star_count,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges               ProjectEdges `json:"edges"`
	user_owned_projects *string
	selectValues        sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// LikedBy holds the value of the liked_by edge.
	LikedBy []*User `json:"liked_by,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*Like `json:"likes,omitempty"`
	// ProjectTags holds the value of the project_tags edge.
	ProjectTags []*ProjectTag `json:"project_tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// LikedByOrErr returns the LikedBy value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) LikedByOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.LikedBy, nil
	}
	return nil, &NotLoadedError{edge: "liked_by"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[2] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) LikesOrErr() ([]*Like, error) {
	if e.loadedTypes[3] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// ProjectTagsOrErr returns the ProjectTags value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) ProjectTagsOrErr() ([]*ProjectTag, error) {
	if e.loadedTypes[4] {
		return e.ProjectTags, nil
	}
	return nil, &NotLoadedError{edge: "project_tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldLikeCount, project.FieldStarCount:
			values[i] = new(sql.NullInt64)
		case project.FieldID, project.FieldName, project.FieldDescription:
			values[i] = new(sql.NullString)
		case project.FieldCreateTime, project.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case project.ForeignKeys[0]: // user_owned_projects
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (_m *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case project.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case project.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case project.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = new(string)
				*_m.Description = value.String
			}
		case project.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				_m.LikeCount = int(value.Int64)
			}
		case project.FieldStarCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field star_count", values[i])
			} else if value.Valid {
				_m.StarCount = int(value.Int64)
			}
		case project.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_owned_projects", values[i])
			} else if value.Valid {
				_m.user_owned_projects = new(string)
				*_m.user_owned_projects = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (_m *Project) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Project entity.
func (_m *Project) QueryOwner() *UserQuery {
	return NewProjectClient(_m.config).QueryOwner(_m)
}

// QueryLikedBy queries the "liked_by" edge of the Project entity.
func (_m *Project) QueryLikedBy() *UserQuery {
	return NewProjectClient(_m.config).QueryLikedBy(_m)
}

// QueryTags queries the "tags" edge of the Project entity.
func (_m *Project) QueryTags() *TagQuery {
	return NewProjectClient(_m.config).QueryTags(_m)
}

// QueryLikes queries the "likes" edge of the Project entity.
func (_m *Project) QueryLikes() *LikeQuery {
	return NewProjectClient(_m.config).QueryLikes(_m)
}

// QueryProjectTags queries the "project_tags" edge of the Project entity.
func (_m *Project) QueryProjectTags() *ProjectTagQuery {
	return NewProjectClient(_m.config).QueryProjectTags(_m)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Project) Unwrap() *Project {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	if v := _m.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("star_count=")
	builder.WriteString(fmt.Sprintf("%v", _m.StarCount))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
