// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
)

// ProjectTag is the model entity for the ProjectTag schema.
type ProjectTag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// ProjectID holds the value of the "project_id" field.
	ProjectID string `json:"project_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID string `json:"tag_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectTagQuery when eager-loading is set.
	Edges        ProjectTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectTagEdges holds the relations/edges for other nodes in the graph.
type ProjectTagEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTagEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectTagEdges) TagOrErr() (*Tag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projecttag.FieldID, projecttag.FieldProjectID, projecttag.FieldTagID:
			values[i] = new(sql.NullString)
		case projecttag.FieldCreateTime, projecttag.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectTag fields.
func (_m *ProjectTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projecttag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case projecttag.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				_m.CreateTime = value.Time
			}
		case projecttag.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				_m.UpdateTime = value.Time
			}
		case projecttag.FieldProjectID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field project_id", values[i])
			} else if value.Valid {
				_m.ProjectID = value.String
			}
		case projecttag.FieldTagID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				_m.TagID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectTag.
// This includes values selected through modifiers, order, etc.
func (_m *ProjectTag) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the ProjectTag entity.
func (_m *ProjectTag) QueryProject() *ProjectQuery {
	return NewProjectTagClient(_m.config).QueryProject(_m)
}

// QueryTag queries the "tag" edge of the ProjectTag entity.
func (_m *ProjectTag) QueryTag() *TagQuery {
	return NewProjectTagClient(_m.config).QueryTag(_m)
}

// Update returns a builder for updating this ProjectTag.
// Note that you need to call ProjectTag.Unwrap() before calling this method if this ProjectTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProjectTag) Update() *ProjectTagUpdateOne {
	return NewProjectTagClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProjectTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProjectTag) Unwrap() *ProjectTag {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectTag is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProjectTag) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(_m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(_m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("project_id=")
	builder.WriteString(_m.ProjectID)
	builder.WriteString(", ")
	builder.WriteString("tag_id=")
	builder.WriteString(_m.TagID)
	builder.WriteByte(')')
	return builder.String()
}

// ProjectTags is a parsable slice of ProjectTag.
type ProjectTags []*ProjectTag
