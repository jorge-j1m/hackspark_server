// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/predicate"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
	"github.com/jorge-j1m/hackspark_server/ent/usertechnology"
)

// TagUpdate is the builder for updating Tag entities.
type TagUpdate struct {
	config
	hooks    []Hook
	mutation *TagMutation
}

// Where appends a list predicates to the TagUpdate builder.
func (_u *TagUpdate) Where(ps ...predicate.Tag) *TagUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *TagUpdate) SetUpdateTime(v time.Time) *TagUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetName sets the "name" field.
func (_u *TagUpdate) SetName(v string) *TagUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TagUpdate) SetNillableName(v *string) *TagUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSlug sets the "slug" field.
func (_u *TagUpdate) SetSlug(v string) *TagUpdate {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *TagUpdate) SetNillableSlug(v *string) *TagUpdate {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *TagUpdate) SetIcon(v string) *TagUpdate {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *TagUpdate) SetNillableIcon(v *string) *TagUpdate {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *TagUpdate) ClearIcon() *TagUpdate {
	_u.mutation.ClearIcon()
	return _u
}

// SetDescription sets the "description" field.
func (_u *TagUpdate) SetDescription(v string) *TagUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TagUpdate) SetNillableDescription(v *string) *TagUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TagUpdate) ClearDescription() *TagUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *TagUpdate) SetCategory(v tag.Category) *TagUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TagUpdate) SetNillableCategory(v *tag.Category) *TagUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetUsageCount sets the "usage_count" field.
func (_u *TagUpdate) SetUsageCount(v int) *TagUpdate {
	_u.mutation.ResetUsageCount()
	_u.mutation.SetUsageCount(v)
	return _u
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (_u *TagUpdate) SetNillableUsageCount(v *int) *TagUpdate {
	if v != nil {
		_u.SetUsageCount(*v)
	}
	return _u
}

// AddUsageCount adds value to the "usage_count" field.
func (_u *TagUpdate) AddUsageCount(v int) *TagUpdate {
	_u.mutation.AddUsageCount(v)
	return _u
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *TagUpdate) SetCreatorID(id string) *TagUpdate {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (_u *TagUpdate) SetNillableCreatorID(id *string) *TagUpdate {
	if id != nil {
		_u = _u.SetCreatorID(*id)
	}
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *TagUpdate) SetCreator(v *User) *TagUpdate {
	return _u.SetCreatorID(v.ID)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (_u *TagUpdate) AddProjectIDs(ids ...string) *TagUpdate {
	_u.mutation.AddProjectIDs(ids...)
	return _u
}

// AddProjects adds the "projects" edges to the Project entity.
func (_u *TagUpdate) AddProjects(v ...*Project) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *TagUpdate) AddUserIDs(ids ...string) *TagUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *TagUpdate) AddUsers(v ...*User) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddProjectTagIDs adds the "project_tags" edge to the ProjectTag entity by IDs.
func (_u *TagUpdate) AddProjectTagIDs(ids ...string) *TagUpdate {
	_u.mutation.AddProjectTagIDs(ids...)
	return _u
}

// AddProjectTags adds the "project_tags" edges to the ProjectTag entity.
func (_u *TagUpdate) AddProjectTags(v ...*ProjectTag) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectTagIDs(ids...)
}

// AddUserTechnologyIDs adds the "user_technologies" edge to the UserTechnology entity by IDs.
func (_u *TagUpdate) AddUserTechnologyIDs(ids ...string) *TagUpdate {
	_u.mutation.AddUserTechnologyIDs(ids...)
	return _u
}

// AddUserTechnologies adds the "user_technologies" edges to the UserTechnology entity.
func (_u *TagUpdate) AddUserTechnologies(v ...*UserTechnology) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserTechnologyIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (_u *TagUpdate) Mutation() *TagMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *TagUpdate) ClearCreator() *TagUpdate {
	_u.mutation.ClearCreator()
	return _u
}

// ClearProjects clears all "projects" edges to the Project entity.
func (_u *TagUpdate) ClearProjects() *TagUpdate {
	_u.mutation.ClearProjects()
	return _u
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (_u *TagUpdate) RemoveProjectIDs(ids ...string) *TagUpdate {
	_u.mutation.RemoveProjectIDs(ids...)
	return _u
}

// RemoveProjects removes "projects" edges to Project entities.
func (_u *TagUpdate) RemoveProjects(v ...*Project) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *TagUpdate) ClearUsers() *TagUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *TagUpdate) RemoveUserIDs(ids ...string) *TagUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *TagUpdate) RemoveUsers(v ...*User) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearProjectTags clears all "project_tags" edges to the ProjectTag entity.
func (_u *TagUpdate) ClearProjectTags() *TagUpdate {
	_u.mutation.ClearProjectTags()
	return _u
}

// RemoveProjectTagIDs removes the "project_tags" edge to ProjectTag entities by IDs.
func (_u *TagUpdate) RemoveProjectTagIDs(ids ...string) *TagUpdate {
	_u.mutation.RemoveProjectTagIDs(ids...)
	return _u
}

// RemoveProjectTags removes "project_tags" edges to ProjectTag entities.
func (_u *TagUpdate) RemoveProjectTags(v ...*ProjectTag) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectTagIDs(ids...)
}

// ClearUserTechnologies clears all "user_technologies" edges to the UserTechnology entity.
func (_u *TagUpdate) ClearUserTechnologies() *TagUpdate {
	_u.mutation.ClearUserTechnologies()
	return _u
}

// RemoveUserTechnologyIDs removes the "user_technologies" edge to UserTechnology entities by IDs.
func (_u *TagUpdate) RemoveUserTechnologyIDs(ids ...string) *TagUpdate {
	_u.mutation.RemoveUserTechnologyIDs(ids...)
	return _u
}

// RemoveUserTechnologies removes "user_technologies" edges to UserTechnology entities.
func (_u *TagUpdate) RemoveUserTechnologies(v ...*UserTechnology) *TagUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserTechnologyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TagUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TagUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TagUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TagUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TagUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := tag.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TagUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := tag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tag.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Slug(); ok {
		if err := tag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Tag.slug": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := tag.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Tag.category": %w`, err)}
		}
	}
	return nil
}

func (_u *TagUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tag.Table, tag.Columns, sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(tag.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tag.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(tag.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(tag.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(tag.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(tag.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(tag.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(tag.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UsageCount(); ok {
		_spec.SetField(tag.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUsageCount(); ok {
		_spec.AddField(tag.FieldUsageCount, field.TypeInt, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tag.CreatorTable,
			Columns: []string{tag.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tag.CreatorTable,
			Columns: []string{tag.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !_u.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &UserTechnologyCreate{config: _u.config, mutation: newUserTechnologyMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTechnologyCreate{config: _u.config, mutation: newUserTechnologyMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTechnologyCreate{config: _u.config, mutation: newUserTechnologyMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectTagsIDs(); len(nodes) > 0 && !_u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserTechnologiesIDs(); len(nodes) > 0 && !_u.mutation.UserTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TagUpdateOne is the builder for updating a single Tag entity.
type TagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TagMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *TagUpdateOne) SetUpdateTime(v time.Time) *TagUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetName sets the "name" field.
func (_u *TagUpdateOne) SetName(v string) *TagUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TagUpdateOne) SetNillableName(v *string) *TagUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetSlug sets the "slug" field.
func (_u *TagUpdateOne) SetSlug(v string) *TagUpdateOne {
	_u.mutation.SetSlug(v)
	return _u
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (_u *TagUpdateOne) SetNillableSlug(v *string) *TagUpdateOne {
	if v != nil {
		_u.SetSlug(*v)
	}
	return _u
}

// SetIcon sets the "icon" field.
func (_u *TagUpdateOne) SetIcon(v string) *TagUpdateOne {
	_u.mutation.SetIcon(v)
	return _u
}

// SetNillableIcon sets the "icon" field if the given value is not nil.
func (_u *TagUpdateOne) SetNillableIcon(v *string) *TagUpdateOne {
	if v != nil {
		_u.SetIcon(*v)
	}
	return _u
}

// ClearIcon clears the value of the "icon" field.
func (_u *TagUpdateOne) ClearIcon() *TagUpdateOne {
	_u.mutation.ClearIcon()
	return _u
}

// SetDescription sets the "description" field.
func (_u *TagUpdateOne) SetDescription(v string) *TagUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TagUpdateOne) SetNillableDescription(v *string) *TagUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TagUpdateOne) ClearDescription() *TagUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCategory sets the "category" field.
func (_u *TagUpdateOne) SetCategory(v tag.Category) *TagUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TagUpdateOne) SetNillableCategory(v *tag.Category) *TagUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetUsageCount sets the "usage_count" field.
func (_u *TagUpdateOne) SetUsageCount(v int) *TagUpdateOne {
	_u.mutation.ResetUsageCount()
	_u.mutation.SetUsageCount(v)
	return _u
}

// SetNillableUsageCount sets the "usage_count" field if the given value is not nil.
func (_u *TagUpdateOne) SetNillableUsageCount(v *int) *TagUpdateOne {
	if v != nil {
		_u.SetUsageCount(*v)
	}
	return _u
}

// AddUsageCount adds value to the "usage_count" field.
func (_u *TagUpdateOne) AddUsageCount(v int) *TagUpdateOne {
	_u.mutation.AddUsageCount(v)
	return _u
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (_u *TagUpdateOne) SetCreatorID(id string) *TagUpdateOne {
	_u.mutation.SetCreatorID(id)
	return _u
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (_u *TagUpdateOne) SetNillableCreatorID(id *string) *TagUpdateOne {
	if id != nil {
		_u = _u.SetCreatorID(*id)
	}
	return _u
}

// SetCreator sets the "creator" edge to the User entity.
func (_u *TagUpdateOne) SetCreator(v *User) *TagUpdateOne {
	return _u.SetCreatorID(v.ID)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (_u *TagUpdateOne) AddProjectIDs(ids ...string) *TagUpdateOne {
	_u.mutation.AddProjectIDs(ids...)
	return _u
}

// AddProjects adds the "projects" edges to the Project entity.
func (_u *TagUpdateOne) AddProjects(v ...*Project) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *TagUpdateOne) AddUserIDs(ids ...string) *TagUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *TagUpdateOne) AddUsers(v ...*User) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddProjectTagIDs adds the "project_tags" edge to the ProjectTag entity by IDs.
func (_u *TagUpdateOne) AddProjectTagIDs(ids ...string) *TagUpdateOne {
	_u.mutation.AddProjectTagIDs(ids...)
	return _u
}

// AddProjectTags adds the "project_tags" edges to the ProjectTag entity.
func (_u *TagUpdateOne) AddProjectTags(v ...*ProjectTag) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectTagIDs(ids...)
}

// AddUserTechnologyIDs adds the "user_technologies" edge to the UserTechnology entity by IDs.
func (_u *TagUpdateOne) AddUserTechnologyIDs(ids ...string) *TagUpdateOne {
	_u.mutation.AddUserTechnologyIDs(ids...)
	return _u
}

// AddUserTechnologies adds the "user_technologies" edges to the UserTechnology entity.
func (_u *TagUpdateOne) AddUserTechnologies(v ...*UserTechnology) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserTechnologyIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (_u *TagUpdateOne) Mutation() *TagMutation {
	return _u.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (_u *TagUpdateOne) ClearCreator() *TagUpdateOne {
	_u.mutation.ClearCreator()
	return _u
}

// ClearProjects clears all "projects" edges to the Project entity.
func (_u *TagUpdateOne) ClearProjects() *TagUpdateOne {
	_u.mutation.ClearProjects()
	return _u
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (_u *TagUpdateOne) RemoveProjectIDs(ids ...string) *TagUpdateOne {
	_u.mutation.RemoveProjectIDs(ids...)
	return _u
}

// RemoveProjects removes "projects" edges to Project entities.
func (_u *TagUpdateOne) RemoveProjects(v ...*Project) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *TagUpdateOne) ClearUsers() *TagUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *TagUpdateOne) RemoveUserIDs(ids ...string) *TagUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *TagUpdateOne) RemoveUsers(v ...*User) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearProjectTags clears all "project_tags" edges to the ProjectTag entity.
func (_u *TagUpdateOne) ClearProjectTags() *TagUpdateOne {
	_u.mutation.ClearProjectTags()
	return _u
}

// RemoveProjectTagIDs removes the "project_tags" edge to ProjectTag entities by IDs.
func (_u *TagUpdateOne) RemoveProjectTagIDs(ids ...string) *TagUpdateOne {
	_u.mutation.RemoveProjectTagIDs(ids...)
	return _u
}

// RemoveProjectTags removes "project_tags" edges to ProjectTag entities.
func (_u *TagUpdateOne) RemoveProjectTags(v ...*ProjectTag) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectTagIDs(ids...)
}

// ClearUserTechnologies clears all "user_technologies" edges to the UserTechnology entity.
func (_u *TagUpdateOne) ClearUserTechnologies() *TagUpdateOne {
	_u.mutation.ClearUserTechnologies()
	return _u
}

// RemoveUserTechnologyIDs removes the "user_technologies" edge to UserTechnology entities by IDs.
func (_u *TagUpdateOne) RemoveUserTechnologyIDs(ids ...string) *TagUpdateOne {
	_u.mutation.RemoveUserTechnologyIDs(ids...)
	return _u
}

// RemoveUserTechnologies removes "user_technologies" edges to UserTechnology entities.
func (_u *TagUpdateOne) RemoveUserTechnologies(v ...*UserTechnology) *TagUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserTechnologyIDs(ids...)
}

// Where appends a list predicates to the TagUpdate builder.
func (_u *TagUpdateOne) Where(ps ...predicate.Tag) *TagUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TagUpdateOne) Select(field string, fields ...string) *TagUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Tag entity.
func (_u *TagUpdateOne) Save(ctx context.Context) (*Tag, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TagUpdateOne) SaveX(ctx context.Context) *Tag {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TagUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TagUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TagUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := tag.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TagUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := tag.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Tag.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Slug(); ok {
		if err := tag.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Tag.slug": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := tag.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Tag.category": %w`, err)}
		}
	}
	return nil
}

func (_u *TagUpdateOne) sqlSave(ctx context.Context) (_node *Tag, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tag.Table, tag.Columns, sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tag.FieldID)
		for _, f := range fields {
			if !tag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(tag.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(tag.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Slug(); ok {
		_spec.SetField(tag.FieldSlug, field.TypeString, value)
	}
	if value, ok := _u.mutation.Icon(); ok {
		_spec.SetField(tag.FieldIcon, field.TypeString, value)
	}
	if _u.mutation.IconCleared() {
		_spec.ClearField(tag.FieldIcon, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(tag.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(tag.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(tag.FieldCategory, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UsageCount(); ok {
		_spec.SetField(tag.FieldUsageCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUsageCount(); ok {
		_spec.AddField(tag.FieldUsageCount, field.TypeInt, value)
	}
	if _u.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tag.CreatorTable,
			Columns: []string{tag.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tag.CreatorTable,
			Columns: []string{tag.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !_u.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.ProjectsTable,
			Columns: tag.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _u.config, mutation: newProjectTagMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &UserTechnologyCreate{config: _u.config, mutation: newUserTechnologyMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTechnologyCreate{config: _u.config, mutation: newUserTechnologyMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.UsersTable,
			Columns: tag.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserTechnologyCreate{config: _u.config, mutation: newUserTechnologyMutation(_u.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectTagsIDs(); len(nodes) > 0 && !_u.mutation.ProjectTagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.ProjectTagsTable,
			Columns: []string{tag.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserTechnologiesIDs(); len(nodes) > 0 && !_u.mutation.UserTechnologiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserTechnologiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   tag.UserTechnologiesTable,
			Columns: []string{tag.UserTechnologiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tag{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
