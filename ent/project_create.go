// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/like"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
)

// ProjectCreate is the builder for creating a Project entity.
type ProjectCreate struct {
	config
	mutation *ProjectMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *ProjectCreate) SetCreateTime(v time.Time) *ProjectCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *ProjectCreate) SetNillableCreateTime(v *time.Time) *ProjectCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *ProjectCreate) SetUpdateTime(v time.Time) *ProjectCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *ProjectCreate) SetNillableUpdateTime(v *time.Time) *ProjectCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ProjectCreate) SetName(v string) *ProjectCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ProjectCreate) SetDescription(v string) *ProjectCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ProjectCreate) SetNillableDescription(v *string) *ProjectCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetLikeCount sets the "like_count" field.
func (_c *ProjectCreate) SetLikeCount(v int) *ProjectCreate {
	_c.mutation.SetLikeCount(v)
	return _c
}

// SetNillableLikeCount sets the "like_count" field if the given value is not nil.
func (_c *ProjectCreate) SetNillableLikeCount(v *int) *ProjectCreate {
	if v != nil {
		_c.SetLikeCount(*v)
	}
	return _c
}

// SetStarCount sets the "star_count" field.
func (_c *ProjectCreate) SetStarCount(v int) *ProjectCreate {
	_c.mutation.SetStarCount(v)
	return _c
}

// SetNillableStarCount sets the "star_count" field if the given value is not nil.
func (_c *ProjectCreate) SetNillableStarCount(v *int) *ProjectCreate {
	if v != nil {
		_c.SetStarCount(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ProjectCreate) SetID(v string) *ProjectCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ProjectCreate) SetNillableID(v *string) *ProjectCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (_c *ProjectCreate) SetOwnerID(id string) *ProjectCreate {
	_c.mutation.SetOwnerID(id)
	return _c
}

// SetOwner sets the "owner" edge to the User entity.
func (_c *ProjectCreate) SetOwner(v *User) *ProjectCreate {
	return _c.SetOwnerID(v.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the User entity by IDs.
func (_c *ProjectCreate) AddLikedByIDs(ids ...string) *ProjectCreate {
	_c.mutation.AddLikedByIDs(ids...)
	return _c
}

// AddLikedBy adds the "liked_by" edges to the User entity.
func (_c *ProjectCreate) AddLikedBy(v ...*User) *ProjectCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLikedByIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_c *ProjectCreate) AddTagIDs(ids ...string) *ProjectCreate {
	_c.mutation.AddTagIDs(ids...)
	return _c
}

// AddTags adds the "tags" edges to the Tag entity.
func (_c *ProjectCreate) AddTags(v ...*Tag) *ProjectCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTagIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (_c *ProjectCreate) AddLikeIDs(ids ...string) *ProjectCreate {
	_c.mutation.AddLikeIDs(ids...)
	return _c
}

// AddLikes adds the "likes" edges to the Like entity.
func (_c *ProjectCreate) AddLikes(v ...*Like) *ProjectCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddLikeIDs(ids...)
}

// AddProjectTagIDs adds the "project_tags" edge to the ProjectTag entity by IDs.
func (_c *ProjectCreate) AddProjectTagIDs(ids ...string) *ProjectCreate {
	_c.mutation.AddProjectTagIDs(ids...)
	return _c
}

// AddProjectTags adds the "project_tags" edges to the ProjectTag entity.
func (_c *ProjectCreate) AddProjectTags(v ...*ProjectTag) *ProjectCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProjectTagIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_c *ProjectCreate) Mutation() *ProjectMutation {
	return _c.mutation
}

// Save creates the Project in the database.
func (_c *ProjectCreate) Save(ctx context.Context) (*Project, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProjectCreate) SaveX(ctx context.Context) *Project {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProjectCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProjectCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProjectCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := project.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := project.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.LikeCount(); !ok {
		v := project.DefaultLikeCount
		_c.mutation.SetLikeCount(v)
	}
	if _, ok := _c.mutation.StarCount(); !ok {
		v := project.DefaultStarCount
		_c.mutation.SetStarCount(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := project.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProjectCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Project.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Project.update_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Project.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := project.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Project.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.LikeCount(); !ok {
		return &ValidationError{Name: "like_count", err: errors.New(`ent: missing required field "Project.like_count"`)}
	}
	if _, ok := _c.mutation.StarCount(); !ok {
		return &ValidationError{Name: "star_count", err: errors.New(`ent: missing required field "Project.star_count"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := project.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Project.id": %w`, err)}
		}
	}
	if len(_c.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Project.owner"`)}
	}
	return nil
}

func (_c *ProjectCreate) sqlSave(ctx context.Context) (*Project, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Project.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProjectCreate) createSpec() (*Project, *sqlgraph.CreateSpec) {
	var (
		_node = &Project{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(project.Table, sqlgraph.NewFieldSpec(project.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(project.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(project.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := _c.mutation.LikeCount(); ok {
		_spec.SetField(project.FieldLikeCount, field.TypeInt, value)
		_node.LikeCount = value
	}
	if value, ok := _c.mutation.StarCount(); ok {
		_spec.SetField(project.FieldStarCount, field.TypeInt, value)
		_node.StarCount = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_owned_projects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   project.LikedByTable,
			Columns: project.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &LikeCreate{config: _c.config, mutation: newLikeMutation(_c.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   project.TagsTable,
			Columns: project.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProjectTagCreate{config: _c.config, mutation: newProjectTagMutation(_c.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.LikesTable,
			Columns: []string{project.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProjectTagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   project.ProjectTagsTable,
			Columns: []string{project.ProjectTagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectCreateBulk is the builder for creating many Project entities in bulk.
type ProjectCreateBulk struct {
	config
	err      error
	builders []*ProjectCreate
}

// Save creates the Project entities in the database.
func (_c *ProjectCreateBulk) Save(ctx context.Context) ([]*Project, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Project, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProjectCreateBulk) SaveX(ctx context.Context) []*Project {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProjectCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
