// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/predicate"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
	"github.com/jorge-j1m/hackspark_server/ent/user"
	"github.com/jorge-j1m/hackspark_server/ent/usertechnology"
)

// UserTechnologyUpdate is the builder for updating UserTechnology entities.
type UserTechnologyUpdate struct {
	config
	hooks    []Hook
	mutation *UserTechnologyMutation
}

// Where appends a list predicates to the UserTechnologyUpdate builder.
func (_u *UserTechnologyUpdate) Where(ps ...predicate.UserTechnology) *UserTechnologyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserTechnologyUpdate) SetUpdateTime(v time.Time) *UserTechnologyUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserTechnologyUpdate) SetUserID(v string) *UserTechnologyUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserTechnologyUpdate) SetNillableUserID(v *string) *UserTechnologyUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTechnologyID sets the "technology_id" field.
func (_u *UserTechnologyUpdate) SetTechnologyID(v string) *UserTechnologyUpdate {
	_u.mutation.SetTechnologyID(v)
	return _u
}

// SetNillableTechnologyID sets the "technology_id" field if the given value is not nil.
func (_u *UserTechnologyUpdate) SetNillableTechnologyID(v *string) *UserTechnologyUpdate {
	if v != nil {
		_u.SetTechnologyID(*v)
	}
	return _u
}

// SetSkillLevel sets the "skill_level" field.
func (_u *UserTechnologyUpdate) SetSkillLevel(v usertechnology.SkillLevel) *UserTechnologyUpdate {
	_u.mutation.SetSkillLevel(v)
	return _u
}

// SetNillableSkillLevel sets the "skill_level" field if the given value is not nil.
func (_u *UserTechnologyUpdate) SetNillableSkillLevel(v *usertechnology.SkillLevel) *UserTechnologyUpdate {
	if v != nil {
		_u.SetSkillLevel(*v)
	}
	return _u
}

// SetYearsExperience sets the "years_experience" field.
func (_u *UserTechnologyUpdate) SetYearsExperience(v float64) *UserTechnologyUpdate {
	_u.mutation.ResetYearsExperience()
	_u.mutation.SetYearsExperience(v)
	return _u
}

// SetNillableYearsExperience sets the "years_experience" field if the given value is not nil.
func (_u *UserTechnologyUpdate) SetNillableYearsExperience(v *float64) *UserTechnologyUpdate {
	if v != nil {
		_u.SetYearsExperience(*v)
	}
	return _u
}

// AddYearsExperience adds value to the "years_experience" field.
func (_u *UserTechnologyUpdate) AddYearsExperience(v float64) *UserTechnologyUpdate {
	_u.mutation.AddYearsExperience(v)
	return _u
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (_u *UserTechnologyUpdate) ClearYearsExperience() *UserTechnologyUpdate {
	_u.mutation.ClearYearsExperience()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserTechnologyUpdate) SetUser(v *User) *UserTechnologyUpdate {
	return _u.SetUserID(v.ID)
}

// SetTechnology sets the "technology" edge to the Tag entity.
func (_u *UserTechnologyUpdate) SetTechnology(v *Tag) *UserTechnologyUpdate {
	return _u.SetTechnologyID(v.ID)
}

// Mutation returns the UserTechnologyMutation object of the builder.
func (_u *UserTechnologyUpdate) Mutation() *UserTechnologyMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserTechnologyUpdate) ClearUser() *UserTechnologyUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearTechnology clears the "technology" edge to the Tag entity.
func (_u *UserTechnologyUpdate) ClearTechnology() *UserTechnologyUpdate {
	_u.mutation.ClearTechnology()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserTechnologyUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserTechnologyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserTechnologyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserTechnologyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserTechnologyUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := usertechnology.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserTechnologyUpdate) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := usertechnology.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TechnologyID(); ok {
		if err := usertechnology.TechnologyIDValidator(v); err != nil {
			return &ValidationError{Name: "technology_id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.technology_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SkillLevel(); ok {
		if err := usertechnology.SkillLevelValidator(v); err != nil {
			return &ValidationError{Name: "skill_level", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.skill_level": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserTechnology.user"`)
	}
	if _u.mutation.TechnologyCleared() && len(_u.mutation.TechnologyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserTechnology.technology"`)
	}
	return nil
}

func (_u *UserTechnologyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertechnology.Table, usertechnology.Columns, sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(usertechnology.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SkillLevel(); ok {
		_spec.SetField(usertechnology.FieldSkillLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.YearsExperience(); ok {
		_spec.SetField(usertechnology.FieldYearsExperience, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedYearsExperience(); ok {
		_spec.AddField(usertechnology.FieldYearsExperience, field.TypeFloat64, value)
	}
	if _u.mutation.YearsExperienceCleared() {
		_spec.ClearField(usertechnology.FieldYearsExperience, field.TypeFloat64)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.UserTable,
			Columns: []string{usertechnology.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.UserTable,
			Columns: []string{usertechnology.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.TechnologyTable,
			Columns: []string{usertechnology.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.TechnologyTable,
			Columns: []string{usertechnology.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertechnology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserTechnologyUpdateOne is the builder for updating a single UserTechnology entity.
type UserTechnologyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserTechnologyMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserTechnologyUpdateOne) SetUpdateTime(v time.Time) *UserTechnologyUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *UserTechnologyUpdateOne) SetUserID(v string) *UserTechnologyUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *UserTechnologyUpdateOne) SetNillableUserID(v *string) *UserTechnologyUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// SetTechnologyID sets the "technology_id" field.
func (_u *UserTechnologyUpdateOne) SetTechnologyID(v string) *UserTechnologyUpdateOne {
	_u.mutation.SetTechnologyID(v)
	return _u
}

// SetNillableTechnologyID sets the "technology_id" field if the given value is not nil.
func (_u *UserTechnologyUpdateOne) SetNillableTechnologyID(v *string) *UserTechnologyUpdateOne {
	if v != nil {
		_u.SetTechnologyID(*v)
	}
	return _u
}

// SetSkillLevel sets the "skill_level" field.
func (_u *UserTechnologyUpdateOne) SetSkillLevel(v usertechnology.SkillLevel) *UserTechnologyUpdateOne {
	_u.mutation.SetSkillLevel(v)
	return _u
}

// SetNillableSkillLevel sets the "skill_level" field if the given value is not nil.
func (_u *UserTechnologyUpdateOne) SetNillableSkillLevel(v *usertechnology.SkillLevel) *UserTechnologyUpdateOne {
	if v != nil {
		_u.SetSkillLevel(*v)
	}
	return _u
}

// SetYearsExperience sets the "years_experience" field.
func (_u *UserTechnologyUpdateOne) SetYearsExperience(v float64) *UserTechnologyUpdateOne {
	_u.mutation.ResetYearsExperience()
	_u.mutation.SetYearsExperience(v)
	return _u
}

// SetNillableYearsExperience sets the "years_experience" field if the given value is not nil.
func (_u *UserTechnologyUpdateOne) SetNillableYearsExperience(v *float64) *UserTechnologyUpdateOne {
	if v != nil {
		_u.SetYearsExperience(*v)
	}
	return _u
}

// AddYearsExperience adds value to the "years_experience" field.
func (_u *UserTechnologyUpdateOne) AddYearsExperience(v float64) *UserTechnologyUpdateOne {
	_u.mutation.AddYearsExperience(v)
	return _u
}

// ClearYearsExperience clears the value of the "years_experience" field.
func (_u *UserTechnologyUpdateOne) ClearYearsExperience() *UserTechnologyUpdateOne {
	_u.mutation.ClearYearsExperience()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *UserTechnologyUpdateOne) SetUser(v *User) *UserTechnologyUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetTechnology sets the "technology" edge to the Tag entity.
func (_u *UserTechnologyUpdateOne) SetTechnology(v *Tag) *UserTechnologyUpdateOne {
	return _u.SetTechnologyID(v.ID)
}

// Mutation returns the UserTechnologyMutation object of the builder.
func (_u *UserTechnologyUpdateOne) Mutation() *UserTechnologyMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *UserTechnologyUpdateOne) ClearUser() *UserTechnologyUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearTechnology clears the "technology" edge to the Tag entity.
func (_u *UserTechnologyUpdateOne) ClearTechnology() *UserTechnologyUpdateOne {
	_u.mutation.ClearTechnology()
	return _u
}

// Where appends a list predicates to the UserTechnologyUpdate builder.
func (_u *UserTechnologyUpdateOne) Where(ps ...predicate.UserTechnology) *UserTechnologyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserTechnologyUpdateOne) Select(field string, fields ...string) *UserTechnologyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated UserTechnology entity.
func (_u *UserTechnologyUpdateOne) Save(ctx context.Context) (*UserTechnology, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserTechnologyUpdateOne) SaveX(ctx context.Context) *UserTechnology {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserTechnologyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserTechnologyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserTechnologyUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		v := usertechnology.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *UserTechnologyUpdateOne) check() error {
	if v, ok := _u.mutation.UserID(); ok {
		if err := usertechnology.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TechnologyID(); ok {
		if err := usertechnology.TechnologyIDValidator(v); err != nil {
			return &ValidationError{Name: "technology_id", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.technology_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.SkillLevel(); ok {
		if err := usertechnology.SkillLevelValidator(v); err != nil {
			return &ValidationError{Name: "skill_level", err: fmt.Errorf(`ent: validator failed for field "UserTechnology.skill_level": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserTechnology.user"`)
	}
	if _u.mutation.TechnologyCleared() && len(_u.mutation.TechnologyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserTechnology.technology"`)
	}
	return nil
}

func (_u *UserTechnologyUpdateOne) sqlSave(ctx context.Context) (_node *UserTechnology, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usertechnology.Table, usertechnology.Columns, sqlgraph.NewFieldSpec(usertechnology.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserTechnology.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usertechnology.FieldID)
		for _, f := range fields {
			if !usertechnology.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usertechnology.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(usertechnology.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.SkillLevel(); ok {
		_spec.SetField(usertechnology.FieldSkillLevel, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.YearsExperience(); ok {
		_spec.SetField(usertechnology.FieldYearsExperience, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedYearsExperience(); ok {
		_spec.AddField(usertechnology.FieldYearsExperience, field.TypeFloat64, value)
	}
	if _u.mutation.YearsExperienceCleared() {
		_spec.ClearField(usertechnology.FieldYearsExperience, field.TypeFloat64)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.UserTable,
			Columns: []string{usertechnology.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.UserTable,
			Columns: []string{usertechnology.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TechnologyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.TechnologyTable,
			Columns: []string{usertechnology.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TechnologyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usertechnology.TechnologyTable,
			Columns: []string{usertechnology.TechnologyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserTechnology{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usertechnology.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
