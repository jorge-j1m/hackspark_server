// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jorge-j1m/hackspark_server/ent/project"
	"github.com/jorge-j1m/hackspark_server/ent/projecttag"
	"github.com/jorge-j1m/hackspark_server/ent/tag"
)

// ProjectTagCreate is the builder for creating a ProjectTag entity.
type ProjectTagCreate struct {
	config
	mutation *ProjectTagMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *ProjectTagCreate) SetCreateTime(v time.Time) *ProjectTagCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *ProjectTagCreate) SetNillableCreateTime(v *time.Time) *ProjectTagCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *ProjectTagCreate) SetUpdateTime(v time.Time) *ProjectTagCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *ProjectTagCreate) SetNillableUpdateTime(v *time.Time) *ProjectTagCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetProjectID sets the "project_id" field.
func (_c *ProjectTagCreate) SetProjectID(v string) *ProjectTagCreate {
	_c.mutation.SetProjectID(v)
	return _c
}

// SetTagID sets the "tag_id" field.
func (_c *ProjectTagCreate) SetTagID(v string) *ProjectTagCreate {
	_c.mutation.SetTagID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ProjectTagCreate) SetID(v string) *ProjectTagCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ProjectTagCreate) SetNillableID(v *string) *ProjectTagCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetProject sets the "project" edge to the Project entity.
func (_c *ProjectTagCreate) SetProject(v *Project) *ProjectTagCreate {
	return _c.SetProjectID(v.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (_c *ProjectTagCreate) SetTag(v *Tag) *ProjectTagCreate {
	return _c.SetTagID(v.ID)
}

// Mutation returns the ProjectTagMutation object of the builder.
func (_c *ProjectTagCreate) Mutation() *ProjectTagMutation {
	return _c.mutation
}

// Save creates the ProjectTag in the database.
func (_c *ProjectTagCreate) Save(ctx context.Context) (*ProjectTag, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProjectTagCreate) SaveX(ctx context.Context) *ProjectTag {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProjectTagCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProjectTagCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProjectTagCreate) defaults() {
	if _, ok := _c.mutation.CreateTime(); !ok {
		v := projecttag.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		v := projecttag.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := projecttag.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProjectTagCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ProjectTag.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ProjectTag.update_time"`)}
	}
	if _, ok := _c.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "ProjectTag.project_id"`)}
	}
	if v, ok := _c.mutation.ProjectID(); ok {
		if err := projecttag.ProjectIDValidator(v); err != nil {
			return &ValidationError{Name: "project_id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.project_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "ProjectTag.tag_id"`)}
	}
	if v, ok := _c.mutation.TagID(); ok {
		if err := projecttag.TagIDValidator(v); err != nil {
			return &ValidationError{Name: "tag_id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.tag_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := projecttag.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "ProjectTag.id": %w`, err)}
		}
	}
	if len(_c.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectTag.project"`)}
	}
	if len(_c.mutation.TagIDs()) == 0 {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "ProjectTag.tag"`)}
	}
	return nil
}

func (_c *ProjectTagCreate) sqlSave(ctx context.Context) (*ProjectTag, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProjectTag.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProjectTagCreate) createSpec() (*ProjectTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectTag{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(projecttag.Table, sqlgraph.NewFieldSpec(projecttag.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(projecttag.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(projecttag.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.ProjectTable,
			Columns: []string{projecttag.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projecttag.TagTable,
			Columns: []string{projecttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectTagCreateBulk is the builder for creating many ProjectTag entities in bulk.
type ProjectTagCreateBulk struct {
	config
	err      error
	builders []*ProjectTagCreate
}

// Save creates the ProjectTag entities in the database.
func (_c *ProjectTagCreateBulk) Save(ctx context.Context) ([]*ProjectTag, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ProjectTag, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProjectTagCreateBulk) SaveX(ctx context.Context) []*ProjectTag {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProjectTagCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProjectTagCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
