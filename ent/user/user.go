// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// FieldLastLoginAt holds the string denoting the last_login_at field in the database.
	FieldLastLoginAt = "last_login_at"
	// FieldAccountStatus holds the string denoting the account_status field in the database.
	FieldAccountStatus = "account_status"
	// FieldVerificationToken holds the string denoting the verification_token field in the database.
	FieldVerificationToken = "verification_token"
	// FieldVerificationTokenExpiryAt holds the string denoting the verification_token_expiry_at field in the database.
	FieldVerificationTokenExpiryAt = "verification_token_expiry_at"
	// FieldFailedLoginAttempts holds the string denoting the failed_login_attempts field in the database.
	FieldFailedLoginAttempts = "failed_login_attempts"
	// FieldResetPasswordToken holds the string denoting the reset_password_token field in the database.
	FieldResetPasswordToken = "reset_password_token"
	// FieldResetPasswordTokenExpiryAt holds the string denoting the reset_password_token_expiry_at field in the database.
	FieldResetPasswordTokenExpiryAt = "reset_password_token_expiry_at"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeOwnedProjects holds the string denoting the owned_projects edge name in mutations.
	EdgeOwnedProjects = "owned_projects"
	// EdgeLikedProjects holds the string denoting the liked_projects edge name in mutations.
	EdgeLikedProjects = "liked_projects"
	// EdgeTechnologies holds the string denoting the technologies edge name in mutations.
	EdgeTechnologies = "technologies"
	// EdgeCreatedTags holds the string denoting the created_tags edge name in mutations.
	EdgeCreatedTags = "created_tags"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"
	// EdgeUserTechnologies holds the string denoting the user_technologies edge name in mutations.
	EdgeUserTechnologies = "user_technologies"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_sessions"
	// OwnedProjectsTable is the table that holds the owned_projects relation/edge.
	OwnedProjectsTable = "projects"
	// OwnedProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	OwnedProjectsInverseTable = "projects"
	// OwnedProjectsColumn is the table column denoting the owned_projects relation/edge.
	OwnedProjectsColumn = "user_owned_projects"
	// LikedProjectsTable is the table that holds the liked_projects relation/edge. The primary key declared below.
	LikedProjectsTable = "likes"
	// LikedProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	LikedProjectsInverseTable = "projects"
	// TechnologiesTable is the table that holds the technologies relation/edge. The primary key declared below.
	TechnologiesTable = "user_technologies"
	// TechnologiesInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TechnologiesInverseTable = "tags"
	// CreatedTagsTable is the table that holds the created_tags relation/edge.
	CreatedTagsTable = "tags"
	// CreatedTagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	CreatedTagsInverseTable = "tags"
	// CreatedTagsColumn is the table column denoting the created_tags relation/edge.
	CreatedTagsColumn = "user_created_tags"
	// LikesTable is the table that holds the likes relation/edge.
	LikesTable = "likes"
	// LikesInverseTable is the table name for the Like entity.
	// It exists in this package in order to avoid circular dependency with the "like" package.
	LikesInverseTable = "likes"
	// LikesColumn is the table column denoting the likes relation/edge.
	LikesColumn = "user_id"
	// UserTechnologiesTable is the table that holds the user_technologies relation/edge.
	UserTechnologiesTable = "user_technologies"
	// UserTechnologiesInverseTable is the table name for the UserTechnology entity.
	// It exists in this package in order to avoid circular dependency with the "usertechnology" package.
	UserTechnologiesInverseTable = "user_technologies"
	// UserTechnologiesColumn is the table column denoting the user_technologies relation/edge.
	UserTechnologiesColumn = "user_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldUsername,
	FieldEmail,
	FieldEmailVerified,
	FieldPassword,
	FieldFirstName,
	FieldLastName,
	FieldBio,
	FieldAvatarURL,
	FieldLastLoginAt,
	FieldAccountStatus,
	FieldVerificationToken,
	FieldVerificationTokenExpiryAt,
	FieldFailedLoginAttempts,
	FieldResetPasswordToken,
	FieldResetPasswordTokenExpiryAt,
}

var (
	// LikedProjectsPrimaryKey and LikedProjectsColumn2 are the table columns denoting the
	// primary key for the liked_projects relation (M2M).
	LikedProjectsPrimaryKey = []string{"user_id", "project_id"}
	// TechnologiesPrimaryKey and TechnologiesColumn2 are the table columns denoting the
	// primary key for the technologies relation (M2M).
	TechnologiesPrimaryKey = []string{"user_id", "technology_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/jorge-j1m/hackspark_server/ent/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultEmailVerified holds the default value on creation for the "email_verified" field.
	DefaultEmailVerified bool
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// DefaultFailedLoginAttempts holds the default value on creation for the "failed_login_attempts" field.
	DefaultFailedLoginAttempts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// AccountStatus defines the type for the "account_status" enum field.
type AccountStatus string

// AccountStatusPending is the default value of the AccountStatus enum.
const DefaultAccountStatus = AccountStatusPending

// AccountStatus values.
const (
	AccountStatusPending   AccountStatus = "pending"
	AccountStatusActive    AccountStatus = "active"
	AccountStatusSuspended AccountStatus = "suspended"
)

func (as AccountStatus) String() string {
	return string(as)
}

// AccountStatusValidator is a validator for the "account_status" field enum values. It is called by the builders before save.
func AccountStatusValidator(as AccountStatus) error {
	switch as {
	case AccountStatusPending, AccountStatusActive, AccountStatusSuspended:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for account_status field: %q", as)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByLastLoginAt orders the results by the last_login_at field.
func ByLastLoginAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginAt, opts...).ToFunc()
}

// ByAccountStatus orders the results by the account_status field.
func ByAccountStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountStatus, opts...).ToFunc()
}

// ByVerificationToken orders the results by the verification_token field.
func ByVerificationToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationToken, opts...).ToFunc()
}

// ByVerificationTokenExpiryAt orders the results by the verification_token_expiry_at field.
func ByVerificationTokenExpiryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerificationTokenExpiryAt, opts...).ToFunc()
}

// ByFailedLoginAttempts orders the results by the failed_login_attempts field.
func ByFailedLoginAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFailedLoginAttempts, opts...).ToFunc()
}

// ByResetPasswordToken orders the results by the reset_password_token field.
func ByResetPasswordToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetPasswordToken, opts...).ToFunc()
}

// ByResetPasswordTokenExpiryAt orders the results by the reset_password_token_expiry_at field.
func ByResetPasswordTokenExpiryAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResetPasswordTokenExpiryAt, opts...).ToFunc()
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedProjectsCount orders the results by owned_projects count.
func ByOwnedProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedProjectsStep(), opts...)
	}
}

// ByOwnedProjects orders the results by owned_projects terms.
func ByOwnedProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikedProjectsCount orders the results by liked_projects count.
func ByLikedProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikedProjectsStep(), opts...)
	}
}

// ByLikedProjects orders the results by liked_projects terms.
func ByLikedProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikedProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTechnologiesCount orders the results by technologies count.
func ByTechnologiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTechnologiesStep(), opts...)
	}
}

// ByTechnologies orders the results by technologies terms.
func ByTechnologies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTechnologiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreatedTagsCount orders the results by created_tags count.
func ByCreatedTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedTagsStep(), opts...)
	}
}

// ByCreatedTags orders the results by created_tags terms.
func ByCreatedTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLikesCount orders the results by likes count.
func ByLikesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLikesStep(), opts...)
	}
}

// ByLikes orders the results by likes terms.
func ByLikes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserTechnologiesCount orders the results by user_technologies count.
func ByUserTechnologiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTechnologiesStep(), opts...)
	}
}

// ByUserTechnologies orders the results by user_technologies terms.
func ByUserTechnologies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTechnologiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newOwnedProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnedProjectsTable, OwnedProjectsColumn),
	)
}
func newLikedProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikedProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, LikedProjectsTable, LikedProjectsPrimaryKey...),
	)
}
func newTechnologiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TechnologiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TechnologiesTable, TechnologiesPrimaryKey...),
	)
}
func newCreatedTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedTagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedTagsTable, CreatedTagsColumn),
	)
}
func newLikesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, LikesTable, LikesColumn),
	)
}
func newUserTechnologiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTechnologiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, UserTechnologiesTable, UserTechnologiesColumn),
	)
}
